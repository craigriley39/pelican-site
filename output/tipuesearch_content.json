{"pages":[{"url":"http://justlearningdjango.com/pages/about.html","text":"Hello This is a page about me. My name is Craig Riley and I am ... blah...blah I have been doing this technology thing for what seems like forever! I really need to fix this font and the color is too bright. Straight white is annoying to say the very least!","tags":"pages","title":"About"},{"url":"http://justlearningdjango.com/welcome.html","text":"This is a site for stuff","tags":"misc","title":"Welcome!"},{"url":"http://justlearningdjango.com/thoughts-on-securing-a-web-blog.html","text":"Securing a web blog ...","tags":"Blog","title":"Thoughts on securing a web blog"},{"url":"http://justlearningdjango.com/setting-up-a-pelican-blog.html","text":"So here is something. Why ever bother with a static webpage generator when you can easily setup a powerful web framework like Django or Wordpress or Drupal? All wonderful questions. I dont really know. One reason might be that security is in order. The thoguht that your exposure to the intnernet is static. There are no database hooks to take advanatage of, no php vulnerabilities, no dynamic rendering that you need to be concerned with. What ever is rendered is what ever is rendered and that is what you get. CSS and JS run on the client machine and as such can't be exploited on the server because there is nothing to exploit. Kind of cool. The other thing that is kind of cool with this whole pelican thing is how simple it is. You edit your file in an ediotor ( I use VIM because I've been using it for years and years and the key bindings are engraned at this point) and then you just save the file and the geneartor creates the output. Markdown isn't too difficult to use either. Although out of the box there are definately some things to tweak. For exmaple: Its pretty plain looking! So here are the basic steps to setup Pelican. Configure your environment Add a theme Create Some Content Configure your environment First we need to install the software - this could not be simplier. $ pkg install virtualenv # now lets enable the virtualenv # i happened to name my virtualenv \"pelican\" $ virtualenv pelican $ cd pelican/ $ . bin/activate $ pip install pelican markdown $ pelican-quickstart you will be asked a bunch of setup questions about your site. You can update these parameters in your pelicanconf.py file after the fact if you want to change something. Lets start the development server $ ./develop_server.sh start Now lets download a theme - this one works ok but you'll want to tweak it. $ git clone https://github.com/DandyDev/pelican-bootstrap3.git Lets point pelican to our new theme Now that we have Pelican installed and running and we've downloaded our theme files we need to tell Pelican where to find the theme. This I find very elegant, there are many frameworks that make theme installation easy but I think this takes the cake. Open up the pelicanconf.py file and add the following: THEME = 'pelican-bootstrap3' Create some content: Title : Setting up a pelican blog Date : 2016 - 02 - 12 10 : 20 Modified : 2016 - 02 - 12 10 : 20 Category : Blog Tags : pelican , publishing , blog Slug : setting - up - a - pelican - blog Authors : Craig Riley Summary : Experimenting with Pelican Create your content using the editor of your choice . > This is a block quote ! That is pretty much it! You have a blog that you can write and add content to without too much trouble. Once you get the hang of the whole markdown thing *which I am still working on ;-) * then you can make it look better. Lets add some color to the theme! So this i think is pretty cool. You will edit the rendered css in the output direcotry and NOT the actual theme you downloaded using GIT. Why is that important? Well, out of the box we can modify the theme to be like we want it without having to change the actual code. If updates come about we can apply them without jacking everythign up. We can easily change the applied background color of the site by adding a background css tag to the style.css body { padding-top : 70px ; background : #b3ecff ; } .navbar { background : #f0f5f5 ; } And maybe some images??? This would be a snazzy example of inserting an image inline with very little code. ![This is the alternate text](/images/pelican.jpg) This would be a snazzy example of inserting an image inline with very little code.","tags":"Blog","title":"Setting up a pelican blog"},{"url":"http://justlearningdjango.com/securing-your-infrastructure.html","text":"There really is no guide to securing your infrastructure - its pretty much impossible. I applaud your efforts though! There are no \"simple fixes\" and surly no simple how-to template that you can follow. \"The only truly secure system is one that is powered off, cast in a block of concrete and sealed in a lead-lined room with armed guard.\" ~ Gene Spafford While this may be the most secure computing model, I think it's safe to say that you lose a bit of functinality with the above approach! The truth of the matter is for a computer system to be worthwhile it must be useful, and to be useful it almost always has to be interconnected to some other computer system and it always needs to be on. The other key attribute to a useful computer system is it needs to be avaiable so that it can be used by humans. And humans are the real problem. As time tics on we become more and more trusting and dependant on all the gadgets and with each and every one of them there are risks. It isn't just our need to be connected that makes us vulnernable, its our desire to be connected as easily and quickly as possible without understanding how we are connected in the first place that makes us vulnerable. I think that in this day in age our largetst defense against the dark arts of the cefisticated computer hacker is the fact that the computer hacker largely doesnt really give a crap. Your best defense is not being a big target. From a security stand point that really isn't the best approach in the whole world when it comes to preparing for the next attack. My account balance is a great reminder of how safe I am from identify theft","tags":"Blog","title":"Securing Your Infrastructure"},{"url":"http://justlearningdjango.com/writing-a-blog-with-a-static-web-page-generator.html","text":"So here is something. Why ever bother with a static webpage generator when you can easily setup a powerful web framework like Django or Wordpress or Drupal? All wonderful questions. I dont really know. One reason might be that security is in order. The thoguht that your exposure to the intnernet is static. There are no database hooks to take advanatage of, no php vulnerabilities, no dynamic rendering that you need to be concerned with. What ever is rendered is what ever is rendered and that is what you get. CSS and JS run on the client machine and as such can't be exploited on the server because there is nothing to exploit. Kind of cool. The other thing that is kind of cool with this whole pelican thing is how simple it is. You edit your file in an ediotor ( I use VIM because I've been using it for years and years and the key bindings are engraned at this point) and then you just save the file and the geneartor creates the output. Markdown isn't too difficult to use either. Although out of the box there are definately some things to tweak. For exmaple: Its pretty plain looking! s = \"Python syntax highlighting\" print s And here is a heading and this is a block quote. Tables might work like this: Column 1 Column 2 Column 3 One renders nicely","tags":"Blog","title":"Writing a Blog with a Static Web Page Generator"}]}