{"pages":[{"url":"http://justlearningdjango.com/search.html","text":"\n\n\n\n      Search - Blog About Nothin.\n\n\n\n\n\n\nBlog About Nothin. \n\nAbout\nWelcome to My Site\nBlog\nLinux\nUnix\n\n\n\n\n\n\n\n\n\n\n\n     $(document).ready(function() {\n      $('#tipue_search_input').tipuesearch({\n              'show': 10,\n             'mode': 'json',\n             'contentLocation': 'http://justlearningdjango.com/tipuesearch_content.json',\n             });\n     });\n     \n\n\n\n\n\n \n\n\nblogroll\n\nPelican\nPython.org\nJinja2\n\n\n\nsocial\n\nGithub\n\n\n\n\nPowered by Pelican. Theme blueidea, inspired by the default theme.\n\n\n","tags":"","title":"      Search - Blog About Nothin.\n"},{"url":"http://justlearningdjango.com/pages/about.html","text":"Hello This is a page about me. My name is Craig Riley and I am ... blah...blah I have been doing this technology thing for what seems like forever! I really need to fix this font and the color is too bright. Straight white is annoying to say the very least!","tags":"pages","title":"About"},{"url":"http://justlearningdjango.com/","text":"Random pages of things I can't seem to remember Welcome to my site. I've collected a bunch of old notes and things that I've gathered over the years. Some of the scripts and programs and such have not been used in so long I couldn't tell you if they actually work. My job has changed considerably over the years and i'm not longer a UNIX dude :( . My focus these days is more around security and leadership but its still fun to recall where it all began. If you stumbled upon this site then frankly i'm a bit surprised...but if you did then feel free to take a look around...hopefully there is something here you find useful.","tags":"pages","title":"Welcome to My Site"},{"url":"http://justlearningdjango.com/setting-up-a-pelican-blog.html","text":"So here is something. Why ever bother with a static webpage generator when you can easily setup a powerful web framework like Django or Wordpress or Drupal? All wonderful questions. I dont really know. One reason might be that security is in order. The thoguht that your exposure to the intnernet is static. There are no database hooks to take advanatage of, no php vulnerabilities, no dynamic rendering that you need to be concerned with. What ever is rendered is what ever is rendered and that is what you get. CSS and JS run on the client machine and as such can't be exploited on the server because there is nothing to exploit. Kind of cool. The other thing that is kind of cool with this whole pelican thing is how simple it is. You edit your file in an ediotor ( I use VIM because I've been using it for years and years and the key bindings are engraned at this point) and then you just save the file and the geneartor creates the output. Markdown isn't too difficult to use either. Although out of the box there are definately some things to tweak. For exmaple: Its pretty plain looking! So here are the basic steps to setup Pelican. Configure your environment Add a theme Create Some Content Configure your environment First we need to install the software - this could not be simplier. $ pkg install virtualenv # now lets enable the virtualenv # i happened to name my virtualenv \"pelican\" $ virtualenv pelican $ cd pelican/ $ . bin/activate $ pip install pelican markdown $ pelican-quickstart you will be asked a bunch of setup questions about your site. You can update these parameters in your pelicanconf.py file after the fact if you want to change something. Lets start the development server $ ./develop_server.sh start Now lets download a theme - this one works ok but you'll want to tweak it. $ git clone https://github.com/DandyDev/pelican-bootstrap3.git Lets point pelican to our new theme Now that we have Pelican installed and running and we've downloaded our theme files we need to tell Pelican where to find the theme. This I find very elegant, there are many frameworks that make theme installation easy but I think this takes the cake. Open up the pelicanconf.py file and add the following: THEME = 'pelican-bootstrap3' Create some content: Title : Setting up a pelican blog Date : 2016 - 02 - 12 10 : 20 Modified : 2016 - 02 - 12 10 : 20 Category : Blog Tags : pelican , publishing , blog Slug : setting - up - a - pelican - blog Authors : Craig Riley Summary : Experimenting with Pelican Create your content using the editor of your choice . > This is a block quote ! That is pretty much it! You have a blog that you can write and add content to without too much trouble. Once you get the hang of the whole markdown thing *which I am still working on ;-) * then you can make it look better. Lets add some color to the theme! So this i think is pretty cool. You will edit the rendered css in the output direcotry and NOT the actual theme you downloaded using GIT. Why is that important? Well, out of the box we can modify the theme to be like we want it without having to change the actual code. If updates come about we can apply them without jacking everythign up. We can easily change the applied background color of the site by adding a background css tag to the style.css body { padding-top : 70px ; background : #b3ecff ; } .navbar { background : #f0f5f5 ; } And maybe some images??? This would be a snazzy example of inserting an image inline with very little code. ![This is the alternate text](/images/pelican.jpg) This would be a snazzy example of inserting an image inline with very little code.","tags":"Blog","title":"Setting up a pelican blog"},{"url":"http://justlearningdjango.com/draft-gather-cisco-phone-stats.html","text":"Gather data from connecting directly to phones on a subnet and query stats We were looking for data on a jitter rates, connection time, firware versions etc. This script will query every phone connected to a spefici switch and plug those elemintes into a database for query later. This script was orig. created by Mike Orstead (Unix Guru) and lent to me. I then tweaked it to work in our environment, grab a few extra details from the phones and plug everything into a database. - Thanks Mike! #!/usr/bin/python import os import re import pexpect import getpass import urllib2 import socket import datetime import psycopg2 def parseDeviceInfo ( phoneDetail , hostName ): outfile = open ( '/tmp/phoneDiscovery.csv' , 'a' ) # set the socket timeout to 10 seconds so that we dont wait forever if a phone doesnt respond socket . setdefaulttimeout ( 10 ) print \"Calling function parsePhoneNetworkInfo\" # here we should define all the global variables we will want to use for the rest of this function # we need to establish the date and time for our database update. now = datetime . datetime . now () curDate = now . strftime ( \"%Y-%m- %d \" ) curTime = now . strftime ( \"%H:%M:%S\" ) avgJitter = '' avgMos = '' minMos = '' maxMos = '' latency = '' port1Cfg = '' port2Cfg = '' macAddr = '' phoneDN = '' # now lets roll through each phone listing and gaathe our stuff. for key in phoneDetail . iterkeys (): # url for the device network stats url = 'http://' + phoneDetail [ key ] + '/StreamingStatistics?1' print \"Trying to open URL:\" , url try : urlOutPut = urllib2 . urlopen ( url ) # now lets try to get the pieces we need out of the info outputParts = re . split ( '<TR>' , urlOutPut . read ()) except IOError as err : print \"Error\" , str ( err ) continue for line in outputParts : # this is where we would search for stuff. if re . search ( 'Avg MOS LQK' , line ): #print line parts = re . split ( '</TD>' , line ) avgMos = re . sub ( '<TD><B>|</B>' , '' , parts [ 2 ]) . rstrip () . lstrip () if re . search ( 'Min MOS LQK' , line ): parts = re . split ( '</TD>' , line ) minMos = re . sub ( '<TD><B>|</B>' , '' , parts [ 2 ]) . rstrip () . lstrip () if re . search ( 'Max MOS LQK' , line ): parts = re . split ( '</TD>' , line ) maxMos = re . sub ( '<TD><B>|</B>' , '' , parts [ 2 ]) . rstrip () . lstrip () if re . search ( 'Avg Jitter' , line ): parts = re . split ( '</TD>' , line ) avgJitter = re . sub ( '<TD><B>|</B>' , '' , parts [ 2 ]) . rstrip () . lstrip () if re . search ( 'Latency' , line ): parts = re . split ( '</TD>' , line ) latency = re . sub ( '<TD><B>|</B>' , '' , parts [ 2 ]) . rstrip () . lstrip () try : avgJitter = avgJitter except : avgJitter = 'unknown' try : minMos = minMos except : minMos = 'unknown' try : avgMos = avgMos except : avgMos = 'unknown' try : maxMos = maxMos except : maxMos = 'unknown' try : latency = latency except : latency = 'unknown' # url for the device network stats url = 'http://' + phoneDetail [ key ] + '/PortInformation?1' print \"Trying to open URL:\" , url try : urlOutPut = urllib2 . urlopen ( url ) # now lets try to get the pieces we need out of the info outputParts = re . split ( '<TR>' , urlOutPut . read ()) except IOError as err : print \"Error\" , str ( err ) for line in outputParts : # this is where we would search for stuff. if re . search ( 'Port 1' , line ): #print line parts = re . split ( '</TD>' , line ) port1Cfg = re . sub ( '<TD><B>|</B>' , '' , parts [ 2 ]) . rstrip () . lstrip () port1Cfg = re . sub ( ',' , '-' , port1Cfg ) if re . search ( 'Port 2' , line ): parts = re . split ( '</TD>' , line ) port2Cfg = re . sub ( '<TD><B>|</B>' , '' , parts [ 2 ]) . rstrip () . lstrip () port2Cfg = re . sub ( ',' , '-' , port2Cfg ) try : port1Cfg = port1Cfg except : port1cfg = 'unknown' try : port2Cfg = port2Cfg except : port2Cfg = 'unknown' # now lets roll through each phone listing and gaathe our stuff. # url for the device network stats url = 'http://' + phoneDetail [ key ] print \"Trying to open URL:\" , url try : urlOutPut = urllib2 . urlopen ( url ) # now lets try to get the pieces we need out of the info outputParts = re . split ( '<TR>' , urlOutPut . read ()) except IOError as err : print \"Error\" , str ( err ) for line in outputParts : # this is where we would search for stuff. if re . search ( 'MAC Address' , line ): #print line try : parts = re . split ( '</TD>' , line ) macAddr = re . sub ( '<TD><B>|</B>' , '' , parts [ 2 ]) . rstrip () . lstrip () except : macAddr = 'unknown' if re . search ( 'Phone DN 1' , line ): parts = re . split ( '</TD>' , line ) phoneDN = re . sub ( '<TD><B>|</B>' , '' , parts [ 2 ]) . rstrip () . lstrip () try : macAddr = macAddr except : macAddr = 'unknown' try : phoneDN = phoneDN except : phoneDN = 'unknown' \"\"\" avgJitter = '' avgMos = '' minMos = '' maxMos = '' latency = '' port1Cfg = '' port2Cfg = '' macAddr = '' phoneDN = '' \"\"\" #/StreamingStatistics?2 # url for the device network stats url = 'http://' + phoneDetail [ key ] + '/StreamingStatistics?2' print \"Trying to open URL:\" , url try : urlOutPut = urllib2 . urlopen ( url ) # now lets try to get the pieces we need out of the info outputParts = re . split ( '<TR>' , urlOutPut . read ()) except IOError as err : print \"Error\" , str ( err ) for line in outputParts : # this is where we would search for stuff. if re . search ( 'Remote Address' , line ): #print line parts = re . split ( '</TD>' , line ) remoteAddr = re . sub ( '<TD><B>|</B>' , '' , parts [ 2 ]) . rstrip () . lstrip () try : remoteAddr = remoteAddr except : remoteAddr = 'unknown' con = None try : con = psycopg2 . connect ( database = 'phones' , user = 'root' ) cur = con . cursor () query = \"insert into info (entry_date,entry_time,switch_ip,dev_name,phone_ip,mac_addr,ext,minMos,maxMos,avgMos,latency,avgJitter,port1Cfg,port2Cfg,remoteAddr) values ( %s , %s , %s , %s , %s , %s , %s , %s , %s , %s , %s , %s , %s , %s , %s )\" data = ( curDate , curTime , hostName , key , phoneDetail [ key ], macAddr , phoneDN , minMos , maxMos , avgMos , latency , avgJitter , port1Cfg , port2Cfg , remoteAddr ) print query print data cur . execute ( query , data ) con . commit () except psycopg2 . DatabaseError , e : print 'Error %s ' % e finally : if con : con . close () print hostName + ',' + key + ',' + phoneDetail [ key ] + ',' + macAddr + ',' + phoneDN + ',' + minMos + ',' + maxMos + ',' + avgMos + ',' + latency + ',' + avgJitter + ',' + port1Cfg + ',' + port2Cfg + ' \\n ' #outfile.write(hostName+','+key+','+phoneDetail[key]+','+macAddr+','+phoneDN+','+minMos+','+maxMos+','+avgMos+','+latency+','+avgJitter+','+port1Cfg+','+port2Cfg+'\\n') #outfile.close() def remoteConnect ( hostName , userName , userPass ): phones = {} phoneDetail = {} tmpf = os . tmpfile () con = pexpect . spawn ( 'ssh ' + userName + '@' + hostName ) con . expect ( 'word:' ) con . sendline ( userPass ) con . expect ( '\\d#' ) con . sendline ( 'term len 0' ) con . expect ( '#' ) # Gather device name / port con . logfile = tmpf con . sendline ( 'show cdp neighbor | include SEP' ) con . expect ( '#' ) con . logfile = None tmpf . seek ( 0 ) outputBuffer = tmpf . readlines () phoneCount = 0 phoneList = [] for line in outputBuffer : if re . search ( 'SEP' , line ): phoneList . append ( line ) print \"Current count of phones:\" , len ( phoneList ) currentNumberofPhones = len ( phoneList ) with open ( '/tmp/phoneDiscovery.csv' , 'a' ) as outfile : outfile . write ( 'Hostname: ' + hostName + ' \\n ' ) outfile . write ( 'Current count of connected phones: ' + str ( currentNumberofPhones ) + ' \\n\\n ' ) outfile . write ( 'Switch Name,PhoneName,Phone IP,Mac Address,Extention,Min Mos,Max Mos,Avg MOS,Latency,Avg Jitter,Phone Port 1 Duplex,Phone Port 2 Duplex \\n ' ) for l in phoneList : # i need to take each entry and get the phone's device name and its port. plist = re . split ( '\\s' , l ) phones [ plist [ 0 ]] = plist [ 2 ] + ' ' + plist [ 3 ] for key in phones . iterkeys (): print key , phones [ key ] dtmpf = os . tmpfile () con . logfile = dtmpf print \"We will be looking for this:\" , phones [ key ] con . sendline ( 'show cdp neighbor ' + phones [ key ] + ' detail' ) con . expect ( '\\d#' ) con . logfile = None dtmpf . seek ( 0 ) outputBuffer = dtmpf . readlines () # loop through the outputBuffer and grab the IP # here is the tough part...i need to have a hash that holds a few things. phoneDetail[key][ip] & phoneDetail[key][deplex] # might be easier just to focus on item 3 for line in outputBuffer : if re . search ( 'IP address' , line ): ip = re . sub ( 'IP address: ' , '' , line ) ip = ip . rstrip () ip = ip . lstrip () phoneDetail [ key ] = ip else : print \"Here is the line:\" , line for nkey in phoneDetail . iterkeys (): print nkey , phoneDetail [ nkey ] print \"disconnecting from device\" , hostName con . sendline ( 'exit' ) parseDeviceInfo ( phoneDetail , hostName ) def main (): \"\"\" This function willbe used to gather some information and call the rest ### Change Log: Todo: Need to grab a few more pieces of info from the page. 1. Capture the port in the output ( we already grab this prior to show cdp neighbor ... detail) 2. Capture the duplex setting on the output of the above command. 3. on the page: http://10.239.174.43/PortInformation?1 of the phone...we would have to start the query for the same device again. - we need to grab Port 1 and Port 2 (network settings) - so right now we jump from main -> remoteConnect() and then loop through devices -> parseDeviceInfo(). I think i'll add another def like parseDeviceInfo called parsePhoneNetworkInfo() and call that with the same loop. Thats it for now. \"\"\" #hostName = raw_input('What host are we connecting to: ').lower() #userName = raw_input('Username: ') #userPass = getpass.getpass('Password: ') userName = '#########' userPass = '#########' #outFile = '/tmp/phoneDiscovery'+hostName+\".csv\" hostName = '' print \"connecting to remote host\" sites = [ '192.168.0.1' ] # you are gonna need to provide a list of switches to connect to. for hostName in sites : remoteConnect ( hostName , userName , userPass ) if __name__ == \"__main__\" : main ()","tags":"Unix","title":"Draft - Gather Cisco Phone Stats"},{"url":"http://justlearningdjango.com/draft-gather-system-data-and-load-into-a-database.html","text":"Gather system data and load into a database This is a scirpt that I cant remember if it works at all to be honest :) I'm sure that parts of it work so that's cool. This script will run some basic stat gathering items on the server and load it into a database. Honestly it wasn't very useful but I ran this on my syslog server that was serioulsy getting pounded. The effort was abandoned as there were many ways to get what you need without all the effort. #!/usr/bin/env python import psutil import datetime import mysql.connector def loadDB ( boot , vm , cpu , du , eth0 ): dbuser = \"load\" dbpass = \"daemon12\" dbname = \"sysinfo\" entry_date = datetime . datetime . now () cnx = mysql . connector . connect ( user = 'load' , password = 'daemon12' , host = 'localhost' , database = 'sysinfo' ) cursor = cnx . cursor () query = ( \"insert into sys \" \"(entry_date,uptime,mem_usage,cpu_usage,disk_usage,net_packets_in_drop,net_packets_out_drop)\" \"VALUES ( %s , %s , %s , %s , %s , %s , %s )\" ) data_stats = ( entry_date , boot , vm , cpu , du , eth0 . dropin , eth0 . dropout ) cursor . execute ( query , data_stats ) cnx . commit () entry_number = cursor . lastrowid cursor . close () cnx . close () def network_io (): nt = psutil . net_io_counters ( pernic = True ) eth0 = nt [ 'eth0' ] return eth0 def bootTime (): bt = psutil . boot_time () bTime = datetime . datetime . fromtimestamp ( psutil . boot_time ()) . strftime ( \"%Y-%m- %d %H:%M:%S\" ) return bTime def virtMemory (): mem = psutil . virtual_memory () mp = mem . percent return mp def cpuPercent (): cpuPercent = psutil . cpu_percent ( interval = None , percpu = False ) return cpuPercent def diskUsage (): freeSpace = psutil . disk_usage ( '/' ) fs = freeSpace . percent return fs def main (): boot = bootTime () vm = virtMemory () cpu = cpuPercent () du = diskUsage () eth0 = network_io () loadDB ( boot , vm , cpu , du , eth0 ) if __name__ == \"__main__\" : main ()","tags":"Unix","title":"Draft - Gather System Data and load into a database"},{"url":"http://justlearningdjango.com/draft-loading-syslog-logfile-into-postgress.html","text":"Parsing log file and loading split data into a Postgress SQL database This script also uses md5 to compare strings in the database with the strings in the file being parsed to ensure we arent loading duplicates. Script basically does: Opens messages file for reading (this is mmeant ot go against a syslog server Splits lines into segments Performs an md5 hash of the line being loaded. The Database being loaded sets the hash as a primary key. This way you can quickly attempt an insert and if the hash already exists it will fail and continue. uploads the unique line to the database. The database structure: logfiles = # select * from syslogs where false; entry_date | entry_time | source_addr | message | hash ------------+------------+-------------+---------+------ (0 rows) #!/usr/bin/python import psycopg2 import sys import string import re import md5 from sh import tail def help (): print \"Help to be written later.....\" sys . exit ( 0 ) def pumpData ( date , time , source , message , lineHash ): \"\"\" This function can assume that we are just plowing thru data... \"\"\" con = None try : con = psycopg2 . connect ( database = 'logfiles' , user = 'root' ) cur = con . cursor () query = \"insert into syslogs (entry_date,entry_time,source_addr,message,hash) values ( %s , %s , %s , %s , %s )\" data = ( date , time , source , message , lineHash ) print data cur . execute ( query , data ) con . commit () except psycopg2 . DatabaseError , e : print 'Error %s ' % e finally : if con : con . close () def tailFile ( logfile ): for line in tail ( \"-f\" , logfile , _iter = True ): parseLine ( line ) def readFile ( logfile ): with open ( logfile , 'r' ) as logfile : loglines = logfile . readlines () for l in loglines : parseLine ( l ) def parseLine ( line ): lineHash = md5 . md5 ( line ) . hexdigest () words = re . split ( '\\s+' , line ) d = ( words [ 0 ], words [ 1 ]) date = string . join ( d ) + ' 2013' time = words [ 2 ] source = words [ 3 ] msg = words [ 4 :] message = string . join ( msg ) pumpData ( date , time , source , message , lineHash ) if __name__ == \"__main__\" : logfile = sys . argv [ 1 ] mode = sys . argv [ 2 ] if ( mode == \"tail\" ): tailFile ( logfile ) elif ( mode == \"read\" ): readFile ( logfile ) else : print \"What mode do you want to use this in.....?\" help ()","tags":"Unix","title":"Draft - Loading syslog logfile into Postgress"},{"url":"http://justlearningdjango.com/draft-nagios-check_sshperf.html","text":"This is a program I used a lot back in the day. Nagios was checking against a bunch of linux and unix machines. The check_sshperf plugin would ssh into a box and run a series of comamnds over the ssh session and then dump them into a named pipe that Nagios would activily listen to. Nagios opens a named pipe as part of its processing and uses this to recieve updates on passive checks. Pretty cool when you get to workign with it. # # sshperf was hanging due to df -k stating stale NFS mounts. I think it would be best to stat only # local filesystems since those are all we are reporting on. changed for solaris df -k to df -lk ## # - 3/3/05 - craig ## # Updated 5/7/09 MAO to handle top upgrade - updated ParseTop() sub # Remove dependency on line position of the Memory string, and allow for new labels: # Old format: # Memory: 16G real, 3798M free, 13G swap in use, 12G swap free # New format: # Memory: 32G phys mem, 28G free mem, 32G total swap, 32G free swap ## ############# # die(\"usage: sshperf -c <configfile>\") if ($ARGV[0] != \"-c\"); $CFGFILE = $ARGV [ 1 ]; $SNMPHOST = $ARGV [ 3 ]; $LOGFILE = \"/usr/local/nagios/var/sshperf.log\" ; $ECFFILE = \"/usr/local/nagios/var/rw/nagios.cmd\" ; if ( $ARGV [ 0 ] eq \"-d\" ) { $DEBUG = 1 ; } else { $DEBUG = 0 ; } ## this program: # reads a config file for thresholds, disks # collects remote info via ssh # parses all info into local variables # submits SSHPERF ok if it can connect via ssh # for each test in config file, submit passive event to nagios for threshold metrics ## todos: # error check ARGs # usage? # # collect interface bandwidth usage # collect disk usage ####################### my $tests ; & ReadConfig (); if (( ! defined ( $connection { \"host\" })) || ( ! defined ( $connection { \"user\" })) || ( ! defined ( $connection { \"key\" }))) { die ( \"missing complete connect statement\\n\" ); } # do the ssh $SSHCOMMAND = '/usr/bin/ssh' ; if ( $connection { \"host\" } =~ /(.*):(\\d+)/ ) { $connection { \"host\" } = $1 ; $connection { \"port\" } = $2 ; } if ( ! defined ( $connection { \"osversion\" })) { $connection { \"osversion\" } = \"linux-rh\" ; } my %commands ; foreach $test ( keys ( %tests )) { # &debug(\"saw test $test\"); if ( $test eq \"load-5minave\" ) { if ( ! defined ( $commands { \"uptime\" })) { $commands { \"uptime\" } = 1 ; } } elsif ( $test =~ /&#94;proc-exists-/ ) { if ( ! defined ( $commands { \"ps\" })) { $commands { \"ps\" } = 1 ; } } elsif ( $test eq \"cpu-idlepct\" ) { if ( ! defined ( $commands { \"vmstat\" })) { $commands { \"vmstat\" } = 1 ; } } elsif ( $test eq \"mem-free\" ) { if ( $connection { \"osversion\" } =~ /linux-rh/ ) { if ( ! defined ( $commands { \"free\" })) { $commands { \"free\" } = 1 ; } } elsif ( $connection { \"osversion\" } =~ /&#94;solaris-/ ) { if ( ! defined ( $commands { \"top\" })) { $commands { \"top\" } = 1 ; } } else { if ( ! defined ( $commands { \"free\" })) { $commands { \"free\" } = 1 ; } } } elsif ( $test eq \"swap-free\" ) { if ( $connection { \"osversion\" } =~ /linux-rh/ ) { if ( ! defined ( $commands { \"free\" })) { $commands { \"free\" } = 1 ; } } elsif ( $connection { \"osversion\" } =~ /&#94;solaris-/ ) { if ( ! defined ( $commands { \"top\" })) { $commands { \"top\" } = 1 ; } } else { if ( ! defined ( $commands { \"free\" })) { $commands { \"free\" } = 1 ; } } } elsif ( $test eq \"mem-freepct\" ) { if ( $connection { \"osversion\" } =~ /linux-rh/ ) { if ( ! defined ( $commands { \"free\" })) { $commands { \"free\" } = 1 ; } } elsif ( $connection { \"osversion\" } =~ /&#94;solaris-/ ) { if ( ! defined ( $commands { \"top\" })) { $commands { \"top\" } = 1 ; } } else { if ( ! defined ( $commands { \"free\" })) { $commands { \"free\" } = 1 ; } } } elsif ( $test eq \"swap-freepct\" ) { if ( $connection { \"osversion\" } =~ /linux-rh/ ) { if ( ! defined ( $commands { \"free\" })) { $commands { \"free\" } = 1 ; } } elsif ( $connection { \"osversion\" } =~ /&#94;solaris-/ ) { if ( ! defined ( $commands { \"top\" })) { $commands { \"top\" } = 1 ; } } else { if ( ! defined ( $commands { \"free\" })) { $commands { \"free\" } = 1 ; } } } elsif ( $test =~ /&#94;sar-/ ) { if ( $connection { \"osversion\" } =~ /linux-rh/ ) { if ( ! defined ( $commands { \"sar\" })) { $commands { \"sar\" } = 1 ; } } else { if ( ! defined ( $commands { \"sar\" })) { $commands { \"sar\" } = 1 ; } } } elsif ( $test =~ /snmp-oid-/ ) { if ( ! defined ( $commands { $test })) { $commands { $test } = 1 ; } } elsif ( $test =~ /&#94;snmp-/ ) { if ( ! defined ( $commands { $test })) { $commands { $test } = 1 ; } } elsif ( $test =~ /disk-usedpct-(.*)/ ) { if ( ! defined ( $commands { \"df\" })) { $commands { \"df\" } = 1 ; } } elsif ( $test =~ /local-check_smtp-(.*)/ ) { if ( ! defined ( $commands { $test })) { $commands { $test } = 1 ; } } elsif ( $test eq \"mysql-status\" ) { if ( ! defined ( $commands { $test })) { $commands { $test } = 1 ; } } elsif ( $test =~ /&#94;int-/ ) { if ( $connection { \"osversion\" } =~ /linux-rh/ ) { if ( ! defined ( $commands { $test })) { $commands { $test } = 1 ; } } else { die ( \"cant do interfaces on non-linux: $test\\n\" ); } } else { die ( \"unknown test: $test\\n\" ); } # XXX NEW } my $sshcmd = \"\" ; foreach ( keys ( %commands )) { # &debug(\"registered command $_\"); if ( $_ eq \"uptime\" ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;uptime;\" ; } elsif ( $_ eq \"ps\" ) { if ( $connection { \"osversion\" } =~ /&#94;solaris-/ ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;ps -ef;\" ; } } elsif ( $_ eq \"vmstat\" ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;vmstat 2 2;\" ; } elsif ( $_ eq \"free\" ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;free;\" ; } elsif ( $_ eq \"top\" ) { if ( $connection { \"osversion\" } =~ /&#94;solaris-/ ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;\\/usr\\/local\\/bin\\/top -n 1;\" ; } else { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;\\/usr\\/local\\/bin\\/top;\" ; } } elsif ( $_ eq \"df\" ) { if ( $connection { \"osversion\" } =~ /linux-rh/ ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;df -P ;\" ; } elsif ( $connection { \"osversion\" } =~ /&#94;solaris-/ ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;df -lk;\" ; } else { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;df;\" ; } } elsif ( $_ eq \"sar\" ) { if ( $connection { \"osversion\" } =~ /linux-rh/ ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;sar -Ah | sort -n -r -k3 | head -200;\" ; } elsif ( $connection { \"osversion\" } =~ /&#94;solaris-/ ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;perf/collect_stats.pl;\" ; } else { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;sar -Ah | sort -n -r -k3 | head -200;\" ; } } elsif ( $_ =~ /&#94;local-check_smtp-(.*)/ ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;bin/check_smtp -H $1 -w 5 -c 10 -t 10 -e \" . $tests { $_ } . \"$e;\" ; } elsif ( $_ =~ /&#94;snmp-/ ) { my ( $h , $comm , $warn , $crit , $misc ) = split ( \"~\" , $tests { $_ }); if ( $SNMPHOST ) { $h = $SNMPHOST ; } if ( $_ eq \"snmp-winprocessorload\" ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;snmpget -v1 -c $comm -Oq $h .1.3.6.1.2.1.25.3.3.1.2.1;\" ; } elsif ( $_ eq \"snmp-winsystemnumusers\" ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;snmpget -v1 -c $comm -Oq $h .1.3.6.1.2.1.25.1.5.0;\" ; } elsif ( $_ eq \"snmp-winsystemprocesses\" ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;snmpget -v1 -c $comm -Oq $h .1.3.6.1.2.1.25.1.6.0;\" ; } elsif ( $_ eq \"snmp-wintcpcurrestab\" ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;snmpget -v1 -c $comm -Oq $h .1.3.6.1.2.1.6.9.0;\" ; } elsif ( $_ eq \"snmp-ioscpu5min\" ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;snmpget -v1 -c $comm -Oq $h .1.3.6.1.4.1.9.2.1.57.0;\" ; } elsif ( $_ eq \"snmp-iosmem5minused\" ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;snmpget -v1 -c $comm -Oq $h .1.3.6.1.4.1.9.9.48.1.1.1.5.1;\" ; } elsif ( $_ eq \"snmp-iosmem5minfree\" ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;snmpget -v1 -c $comm -Oq $h .1.3.6.1.4.1.9.9.48.1.1.1.6.1;\" ; } elsif ( $_ =~ /snmp-oid-/ ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;snmpget -v1 -c $comm -Oq $h $misc;\" ; } else { die ( \"error: unknown snmp command: $_\\n\" ); } } elsif ( $_ eq \"mysql-status\" ) { my ( $user , $pass ) = split ( \"~\" , $tests { $_ }); $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;/usr/bin/mysqladmin -u\" . $user . \" -p\" . $pass . \" status;\" ; } elsif ( $_ =~ /&#94;int-(\\S+)/ ) { $sshcmd = $sshcmd . \"echo \\@\\@\\@\\@;grep $1 /proc/net/dev;\" ; } else { die ( \"unknown command: $_\" ); } # XXX NEW } $sshline = $SSHCOMMAND . \" \" . $connection { \"host\" }; if ( $connection { \"port\" }) { $sshline = $sshline . \" -p\" . $connection { \"port\" }; } $sshline = $sshline . \" -l\" . $connection { \"user\" } . \" -i\" . $connection { \"key\" }; if ( $connection { \"extra\" }) { & debug ( \"Connect extra: \" . $connection { \"extra\" } . \"\\n\" ); $sshline = $sshline . ' \"' . $connection { \"extra\" } . ' \\\"' . $sshcmd . ' \\\" \"' ; } else { $sshline = $sshline . \" \\\"\" . $sshcmd . \"\\\"\" ; } & debug ( \"ssh command line: \" . $sshline ); $result = `$sshline` ; if ( $result =~ /\\@\\@\\@\\@/ ) { $SSHPERFstatus = \"0\" ; # 0 = ok, 1 = warn, 2 = crit $SSHPERFmessage = \"\" ; # 0 = ok, 1 = warn, 2 = crit } else { $SSHPERFstatus = 2 ; $SSHPERFmessage = \"Couldn't connect to \" . $connection { \"host\" }; } my ( @results ) = split ( /\\@\\@\\@\\@/ , $result ); my $res = shift ( @results ); #the first result is trash foreach ( keys ( %commands )) { $res = shift ( @results ); & debug ( \"Parsing for $_\" ); if ( $_ eq \"uptime\" ) { & ParseUptime ( $res ); } elsif ( $_ eq \"ps\" ) { & ParsePs ( $res ); } elsif ( $_ eq \"vmstat\" ) { & ParseVmstat ( $res ); } elsif ( $_ eq \"free\" ) { & ParseFree ( $res ); } elsif ( $_ eq \"df\" ) { & ParseDf ( $res ); } elsif ( $_ eq \"top\" ) { & ParseTop ( $res ); } elsif ( $_ eq \"sar\" ) { & ParseSar ( $res ); } elsif ( $_ =~ /local-check_smtp-(.*)/ ) { & ParseLocalSmtp ( $res , $1 ); } elsif ( $_ =~ /snmp-oid-/ ) { & ParseSnmpOid ( $_ , $res ); } elsif ( $_ =~ /&#94;snmp-/ ) { & ParseSnmp ( $_ , $res ); } elsif ( $_ =~ /&#94;int-(\\S+)/ ) { & ParseInterface ( $1 , $res ); } elsif ( $_ eq \"mysql-status\" ) { & ParseMysqlStatus ( $res ); } else { & debug ( \"Unknown command: $_\" ); die ( \"Unknown command: $_\" ); } # XXX NEW } foreach $test ( keys ( %tests )) { # print \"doing result: $test \\n\"; # next if ($warn == -1); if ( $test eq \"load-5minave\" ) { ( $warn , $crit ) = split ( '~' , $tests { $test }); if ( $ans { \"load-5minave\" } >= $crit ) { $ret = 2 ; } elsif ( $ans { \"load-5minave\" } >= $warn ) { $ret = 1 ; } else { $ret = 0 ; } & SubmitPassive ( \"SSHPERF-load-5minave\" , $ret , \"5 minute load is \" . $ans { \"load-5minave\" } . \"|load-5minave=\" . $ans { \"load-5minave\" } . \",load-15minave=\" . $ans { \"load-15minave\" }); } elsif ( $test eq \"cpu-idlepct\" ) { ( $warn , $crit ) = split ( '~' , $tests { $test }); if ( $ans { \"cpu-idlepct\" } <= $crit ) { $ret = 2 ; } elsif ( $ans { \"cpu-idlepct\" } <= $warn ) { $ret = 1 ; } else { $ret = 0 ; } & SubmitPassive ( \"SSHPERF-cpu-idlepct\" , $ret , \"CPU idle time is \" . $ans { \"cpu-idlepct\" } . \"%|cpu-idlepct=\" . $ans { \"cpu-idlepct\" } . \",cpu-userpct=\" . $ans { \"cpu-userpct\" } . \",cpu-syspct=\" . $ans { \"cpu-syspct\" }); } elsif ( $test eq \"mem-free\" ) { ( $warn , $crit ) = split ( '~' , $tests { $test }); if ( $ans { \"mem-free\" } <= $crit ) { $ret = 2 ; } elsif ( $ans { \"mem-free\" } <= $warn ) { $ret = 1 ; } else { $ret = 0 ; } & SubmitPassive ( \"SSHPERF-mem-free\" , $ret , \"Free memory (\" . $ans { \"mem-free\" } . \" / \" . $ans { \"mem-total\" } . \") |mem-free=\" . $ans { \"mem-free\" } . \",mem-total=\" . $ans { \"mem-total\" } ); } elsif ( $test =~ /proc-exists-(.*)/ ) { ( $numprocs , $procname ) = split ( '~' , $tests { $test }); @processes = split /\\n/ , $ans { \"psout\" }; $count = grep /$procname/ , @processes ; & debug ( \"proc-exists: Found $count processes \\n\" ); if ( $count < $numprocs ) { $ret = 2 ; } else { $ret = 0 ; } & SubmitPassive ( \"SSHPERF-proc-exists-$procname\" , $ret , \"Number of procs with name $procname : \" . $count ); } elsif ( $test eq \"swap-free\" ) { ( $warn , $crit ) = split ( '~' , $tests { $test }); if ( $ans { \"swap-free\" } <= $crit ) { $ret = 2 ; } elsif ( $ans { \"swap-free\" } <= $warn ) { $ret = 1 ; } else { $ret = 0 ; } & SubmitPassive ( \"SSHPERF-swap-free\" , $ret , \"Free swap (\" . $ans { \"swap-free\" } . \" / \" . $ans { \"swap-total\" } . \") |swap-free=\" . $ans { \"swap-free\" } . \",swap-total=\" . $ans { \"swap-total\" } ); } elsif ( $test eq \"mem-freepct\" ) { ( $warn , $crit ) = split ( '~' , $tests { $test }); if ( $ans { \"mem-freepct\" } <= $crit ) { $ret = 2 ; } elsif ( $ans { \"mem-freepct\" } <= $warn ) { $ret = 1 ; } else { $ret = 0 ; } & SubmitPassive ( \"SSHPERF-mem-freepct\" , $ret , \"Free memory \" . sprintf ( \"%02.2f\" , $ans { \"mem-freepct\" }) . \"% |mem-freepct=\" . $ans { \"mem-freepct\" } ); } elsif ( $test eq \"swap-freepct\" ) { ( $warn , $crit ) = split ( '~' , $tests { $test }); if ( $ans { \"swap-freepct\" } <= $crit ) { $ret = 2 ; } elsif ( $ans { \"swap-freepct\" } <= $warn ) { $ret = 1 ; } else { $ret = 0 ; } & SubmitPassive ( \"SSHPERF-swap-freepct\" , $ret , \"Free swap \" . sprintf ( \"%02.2f\" , $ans { \"swap-freepct\" }) . \"% |swap-freepct=\" . $ans { \"swap-freepct\" } ); } elsif ( $test =~ /disk-usedpct-(.*)/ ) { ( $warn , $crit ) = split ( '~' , $tests { $test }); if ( $ans { $test } >= $crit ) { $ret = 2 ; } elsif ( $ans { $test } >= $warn ) { $ret = 1 ; } else { $ret = 0 ; } & SubmitPassive ( \"SSHPERF-disk-usedpct-\" . $1 , $ret , \"Space used on filesystem $1: \" . sprintf ( \"%02.0f\" , $ans { $test }) . \"% |disk-usedpct-\" . $1 . \"=\" . sprintf ( \"%02.0f\" , $ans { $test })); } elsif ( $test =~ /local-check_smtp-(.*)/ ) { if ( $ans { $test } == - 1 ) { $ret = 2 ; & SubmitPassive ( \"SMTP\" , $ret , \"Invalid SMTP response\" ); } elsif ( $ans { $test } == - 2 ) { $ret = 2 ; & SubmitPassive ( \"SMTP\" , $ret , \"Connection refused by host\" ); } elsif ( $ans { $test } < - 2 ) { $ret = 2 ; & SubmitPassive ( \"SMTP\" , $ret , \"Unknown error\" ); } else { $ret = 0 ; & SubmitPassive ( \"SMTP\" , $ret , \"Response time \" . $ans { $test } . \" seconds\" ); } } elsif ( $test =~ /&#94;snmp-/ ) { if ( $test eq \"snmp-winprocessorload\" ) { my ( $h , $comm , $warn , $crit ) = split ( \"~\" , $tests { $test }); if ( $ans { $test } >= $crit ) { $ret = 2 ; } elsif ( $ans { $test } >= $warn ) { $ret = 1 ; } else { $ret = 0 ; } & SubmitPassive ( $test , $ret , \"Processor load: \" . $ans { $test } . \" |winprocessorload=\" . $ans { $test }); } elsif ( $test eq \"snmp-winsystemnumusers\" ) { my ( $h , $comm , $warn , $crit ) = split ( \"~\" , $tests { $test }); if ( $ans { $test } >= $crit ) { $ret = 2 ; } elsif ( $ans { $test } >= $warn ) { $ret = 1 ; } else { $ret = 0 ; } & SubmitPassive ( $test , $ret , \"Number of users: \" . $ans { $test } . \" |winsystemnumusers=\" . $ans { $test }); } elsif ( $test eq \"snmp-winsystemprocesses\" ) { my ( $h , $comm , $warn , $crit ) = split ( \"~\" , $tests { $test }); if ( $ans { $test } >= $crit ) { $ret = 2 ; } elsif ( $ans { $test } >= $warn ) { $ret = 1 ; } else { $ret = 0 ; } & SubmitPassive ( $test , $ret , \"Number of processes: \" . $ans { $test } . \" |winsystemprocesses=\" . $ans { $test }); } elsif ( $test eq \"snmp-wintcpcurrestab\" ) { my ( $h , $comm , $warn , $crit ) = split ( \"~\" , $tests { $test }); if ( $ans { $test } >= $crit ) { $ret = 2 ; } elsif ( $ans { $test } >= $warn ) { $ret = 1 ; } else { $ret = 0 ; } & SubmitPassive ( $test , $ret , \"Established TCP sessions: \" . $ans { $test } . \" |wintcpcurrestab=\" . $ans { $test }); } elsif ( $test eq \"snmp-ioscpu5min\" ) { my ( $h , $comm , $warn , $crit ) = split ( \"~\" , $tests { $test }); if ( $ans { $test } >= $crit ) { $ret = 2 ; } elsif ( $ans { $test } >= $warn ) { $ret = 1 ; } else { $ret = 0 ; } & SubmitPassive ( $test , $ret , \"CPU util (5 min ave): \" . $ans { $test } . \" |cpu5min=\" . $ans { $test }); } elsif ( $test eq \"snmp-iosmem5minused\" ) { my ( $h , $comm , $warn , $crit ) = split ( \"~\" , $tests { $test }); if ( $ans { $test } >= $crit ) { $ret = 2 ; } elsif ( $ans { $test } >= $warn ) { $ret = 1 ; } else { $ret = 0 ; } & SubmitPassive ( $test , $ret , \"Mem used (5 min ave): \" . $ans { $test } . \" |mem5minused=\" . $ans { $test }); } elsif ( $test eq \"snmp-iosmem5minfree\" ) { my ( $h , $comm , $warn , $crit ) = split ( \"~\" , $tests { $test }); if ( $ans { $test } <= $crit ) { $ret = 2 ; } elsif ( $ans { $test } <= $warn ) { $ret = 1 ; } else { $ret = 0 ; } & SubmitPassive ( $test , $ret , \"Mem free (5 min ave): \" . $ans { $test } . \" |mem5minfree=\" . $ans { $test }); } elsif ( $test =~ /snmp-oid-(\\S+)/ ) { my $oidname = $1 ; my ( $h , $comm , $warn , $crit , $oid ) = split ( \"~\" , $tests { $test }); if ( $ans { $test } <= $crit ) { $ret = 2 ; } elsif ( $ans { $test } <= $warn ) { $ret = 1 ; } else { $ret = 0 ; } if ( $oidname =~ /\\S+-outoctects/ ) { $ans_tmp = $ans { $test }; $ans_readable = ( $ans_tmp / 1000 ) . \" k\" ; } else { $ans_readable = $ans { $test }; } & SubmitPassive ( $oidname , $ret , $oidname . \": \" . $ans_readable . \" |\" . $oidname . \"=\" . $ans { $test }); } } elsif ( $test =~ /&#94;sar-/ ) { ( $warn , $crit ) = split ( '~' , $tests { $test }); if ( $ans { $test } <= $crit ) { $ret = 2 ; } elsif ( $ans { $test } <= $warn ) { $ret = 1 ; } else { $ret = 0 ; } $ret = 0 ; & SubmitPassive ( \"SSHPERF-\" . $test , $ret , \"$test: $ans{$test} |\" . $test . \"=\" . $ans { $test }); } elsif ( $test eq \"mysql-status\" ) { ( $user , $pass , $thread_w , $thread_c , $opent_w , $opent_c , $queries_w , $queries_c ) = split ( '~' , $tests { $test }); if ( $ans { \"mysql-uptime\" } < 0 ) { $ret = 2 ; $string = \"Unable to check mysql status\" ; } else { if ( $ans { \"mysql-threads\" } > $thread_c ) { $ret = 2 ; & SubmitPassive ( \"SSHPERF-mysql-threads\" , $ret , \"MySQL thread count too high: \" . $ans { \"mysql-threads\" } . \"|mysql-threads=\" . $ans { \"mysql-threads\" }); } elsif ( $ans { \"mysql-threads\" } > $thread_w ) { $ret = 1 ; & SubmitPassive ( \"SSHPERF-mysql-threads\" , $ret , \"MySQL thread count too high: \" . $ans { \"mysql-threads\" } . \"|mysql-threads=\" . $ans { \"mysql-threads\" }); } else { $ret = 0 ; & SubmitPassive ( \"SSHPERF-mysql-threads\" , $ret , \"MySQL thread count okay: \" . $ans { \"mysql-threads\" } . \"|mysql-threads=\" . $ans { \"mysql-threads\" }); } if ( $ans { \"mysql-opentables\" } > $opent_c ) { $ret = 2 ; & SubmitPassive ( \"SSHPERF-mysql-opentables\" , $ret , \"MySQL too many open tables: \" . $ans { \"mysql-opentables\" } . \" |mysql-opentables=\" . $ans { \"mysql-opentables\" }); } elsif ( $ans { \"mysql-opentables\" } > $opent_w ) { if ( $ret < 1 ) { $ret = 1 ; } & SubmitPassive ( \"SSHPERF-mysql-opentables\" , $ret , \"MySQL too many open tables: \" . $ans { \"mysql-opentables\" } . \" |mysql-opentables=\" . $ans { \"mysql-opentables\" }); } else { & SubmitPassive ( \"SSHPERF-mysql-opentables\" , $ret , \"MySQL open tables okay: \" . $ans { \"mysql-opentables\" } . \" |mysql-opentables=\" . $ans { \"mysql-opentables\" }); } $string = \"Mysql uptime: \" . $ans { \"mysql-uptime\" } . \" seconds\" ; $string = $string . \"|mysql-questions=\" . $ans { \"mysql-questions\" }; } & SubmitPassive ( \"SSHPERF-\" . $test , $ret , $string ); } elsif ( $test =~ /&#94;int-(\\S+)/ ) { if ( defined ( $ans { $test . \"-rxbytes\" }) && ( $ans { $test . \"-rxbytes\" } > 1 )) { $ret = 0 ; } else { $ret = 2 ; } & SubmitPassive ( \"SSHPERF-\" . $test , $ret , \"$test |\" . $test . \"-rxbytes=\" . $ans { $test . \"-rxbytes\" } . \",\" . $test . \"-rxpkts=\" . $ans { $test . \"-rxpkts\" } . \",\" . $test . \"-rxerrs=\" . $ans { $test . \"-rxerrs\" } . \",\" . $test . \"-txbytes=\" . $ans { $test . \"-txbytes\" } . \",\" . $test . \"-txpkts=\" . $ans { $test . \"-txpkts\" } . \",\" . $test . \"-txerrs=\" . $ans { $test . \"-txerrs\" }); } else { die ( \"error: unknown test type: $test\\n\" ); } # XXX NEW } if ( $SSHPERFstatus > 1 ) { & Log ( \"SSHPERF CRITICAL - \" . $SSHPERFmessage ); print ( \"SSHPERF CRITICAL - \" . $SSHPERFmessage . \"\\n\" ); exit ( 2 ); } elsif ( $SSHPERFstatus == 1 ) { # NOT USED TODAY & Log ( \"SSHPERF WARNING - \" . $SSHPERFmessage ); print ( \"SSHPERF WARNING - \" . $SSHPERFmessage . \"\\n\" ); exit ( 1 ); } else { # ($SSHPERFstatus == 0) # &Log(\"SSHPERF OKAY - \" . $SSHPERFmessage); print(\"SSHPERF OKAY - \" . $SSHPERFmessage . \"\\n\"); & Log ( \"SSHPERF OKAY - SSH to host confirmed\\n\" ); } exit 0 ; ####################### sub ParsePs () { my @processes = @_ ; foreach ( @processes ) { $ans { \"psout\" } .= $_ ; } } sub ParseVmstat () { my ( $line ) = @_ ; @lines = split ( /\\n/ , $line ); & debug ( \"ParseVmstat: parsing: $lines[4]\" ); if (( $connection { \"osversion\" } eq \"linux-rh\" ) && ( $lines [ 4 ] =~ /&#94;\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)/ )) { $ans { \"cpu-userpct\" } = $1 ; $ans { \"cpu-syspct\" } = $2 ; $ans { \"cpu-idlepct\" } = $3 ; & debug ( \"ParseVmstat: found user, sys, idle: $1, $2, $3\" ); } elsif (( $connection { \"osversion\" } eq \"linux-rh9\" ) && ( $lines [ 4 ] =~ /&#94;\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+\\d+/ )) { $ans { \"cpu-userpct\" } = $1 ; $ans { \"cpu-syspct\" } = $2 ; $ans { \"cpu-idlepct\" } = $3 ; & debug ( \"ParseVmstat: found user, sys, idle: $1, $2, $3\" ); } elsif (( $connection { \"osversion\" } =~ /&#94;solaris-/ ) && ( $lines [ 4 ] =~ /&#94;\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+\\d+\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)/ )) { $ans { \"cpu-userpct\" } = $1 ; $ans { \"cpu-syspct\" } = $2 ; $ans { \"cpu-idlepct\" } = $3 ; & debug ( \"ParseVmstat: found user, sys, idle: $1, $2, $3\" ); } else { if ( $SSHPERFstatus < 1 ) { $SSHPERFstatus = 1 ; $SSHPERFmessage = \"Couldn't parse vmstat output.\" ; & Log ( $SSHPERFmessage );} } } sub ParseSar () { my ( $line ) = @_ ; # @lines = split(/\\n/, $line); if ( $connection { \"osversion\" } =~ /linux-rh/ ) { #bull.atrust.com 600 1067843400 - pgpgin/s 0.00 my ( @tmp ) = grep ( \"proc/s\" , $line ); if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+proc\\/s\\s+(\\S+)/ ) { & debug ( \"ParseSar found proc/s: $1\" ); $ans { \"sar-procs\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+cswch\\/s\\s+(\\S+)/ ) { & debug ( \"ParseSar found cswch/s: $1\" ); $ans { \"sar-cswchs\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+intr\\/s\\s+(\\S+)/ ) { & debug ( \"ParseSar found intr/s: $1\" ); $ans { \"sar-intrs\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+pgpgin\\/s\\s+(\\S+)/ ) { & debug ( \"ParseSar found pgpgin/s: $1\" ); $ans { \"sar-pgpgins\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+pgpgout\\/s\\s+(\\S+)/ ) { & debug ( \"ParseSar found pgpgout/s: $1\" ); $ans { \"sar-pgpgouts\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+activepg\\s+(\\S+)/ ) { & debug ( \"ParseSar found activepg: $1\" ); $ans { \"sar-activepg\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+inadtypg\\s+(\\S+)/ ) { & debug ( \"ParseSar found inadtypg: $1\" ); $ans { \"sar-inadtypg\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+inaclnpg\\s+(\\S+)/ ) { & debug ( \"ParseSar found inaclnpg: $1\" ); $ans { \"sar-inaclnpg\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+inatarpg\\s+(\\S+)/ ) { & debug ( \"ParseSar found inatarpg: $1\" ); $ans { \"sar-inatarpg\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+pswpin\\/s\\s+(\\S+)/ ) { & debug ( \"ParseSar found pswpins: $1\" ); $ans { \"sar-pswpins\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+pswpout\\/s\\s+(\\S+)/ ) { & debug ( \"ParseSar found pswpouts: $1\" ); $ans { \"sar-pswpouts\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+tps\\s+(\\S+)/ ) { & debug ( \"ParseSar found tps: $1\" ); $ans { \"sar-tps\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+rtps\\s+(\\S+)/ ) { & debug ( \"ParseSar found rtps: $1\" ); $ans { \"sar-rtps\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+wtps\\s+(\\S+)/ ) { & debug ( \"ParseSar found wtps: $1\" ); $ans { \"sar-wtps\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+bread\\/s\\s+(\\S+)/ ) { & debug ( \"ParseSar found breads: $1\" ); $ans { \"sar-breads\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+bwrtn\\/s\\s+(\\S+)/ ) { & debug ( \"ParseSar found bwrtns: $1\" ); $ans { \"sar-bwrtns\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+frmpg\\/s\\s+(\\S+)/ ) { & debug ( \"ParseSar found frmpgs: $1\" ); $ans { \"sar-frmpgs\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+shmpg\\/s\\s+(\\S+)/ ) { & debug ( \"ParseSar found shmpgs: $1\" ); $ans { \"sar-shmpgs\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+bufpg\\/s\\s+(\\S+)/ ) { & debug ( \"ParseSar found bufpgs: $1\" ); $ans { \"sar-bufpgs\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+campg\\/s\\s+(\\S+)/ ) { & debug ( \"ParseSar found campgs: $1\" ); $ans { \"sar-campgs\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+kbmemfree\\s+(\\S+)/ ) { & debug ( \"ParseSar found kbmemfree: $1\" ); $ans { \"sar-kbmemfree\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+kbmemused\\s+(\\S+)/ ) { & debug ( \"ParseSar found kbmemused: $1\" ); $ans { \"sar-kbmemused\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+%memused\\s+(\\S+)/ ) { & debug ( \"ParseSar found pctmemused: $1\" ); $ans { \"sar-pctmemused\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+kbmemshrd\\s+(\\S+)/ ) { & debug ( \"ParseSar found kbmemused: $1\" ); $ans { \"sar-kbmemused\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+kbbuffers\\s+(\\S+)/ ) { & debug ( \"ParseSar found kbmemfree: $1\" ); $ans { \"sar-kbmemfree\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+kbcached\\s+(\\S+)/ ) { & debug ( \"ParseSar found kbmemused: $1\" ); $ans { \"sar-kbmemused\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+kbswpfree\\s+(\\S+)/ ) { & debug ( \"ParseSar found kbmemfree: $1\" ); $ans { \"sar-kbmemfree\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+kbswpused\\s+(\\S+)/ ) { & debug ( \"ParseSar found kbmemused: $1\" ); $ans { \"sar-kbmemused\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+%swpused\\s+(\\S+)/ ) { & debug ( \"ParseSar found pctswpused: $1\" ); $ans { \"sar-pctswpused\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+dentunusd\\s+(\\S+)/ ) { & debug ( \"ParseSar found dentunusd: $1\" ); $ans { \"sar-dentunusd\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+file-sz\\s+(\\S+)/ ) { & debug ( \"ParseSar found filesz: $1\" ); $ans { \"sar-filesz\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+%file-sz\\s+(\\S+)/ ) { & debug ( \"ParseSar found pctfilesz: $1\" ); $ans { \"sar-pctfilesz\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+inode-sz\\s+(\\S+)/ ) { & debug ( \"ParseSar found inodesz: $1\" ); $ans { \"sar-inodesz\" } = $1 ; } # super-sz 0 # %super-sz 0.00 # dquot-sz 0 # %dquot-sz 0.00 # rtsig-sz 0 # %rtsig-sz 0.00 if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+totsck\\s+(\\S+)/ ) { & debug ( \"ParseSar found totsck: $1\" ); $ans { \"sar-totsck\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+tcpsck\\s+(\\S+)/ ) { & debug ( \"ParseSar found tcpsck: $1\" ); $ans { \"sar-tcpsck\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+udpsck\\s+(\\S+)/ ) { & debug ( \"ParseSar found udpsck: $1\" ); $ans { \"sar-udpsck\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+rawsck\\s+(\\S+)/ ) { & debug ( \"ParseSar found rawsck: $1\" ); $ans { \"sar-rawsck\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+ip-frag\\s+(\\S+)/ ) { & debug ( \"ParseSar found ipfrag: $1\" ); $ans { \"sar-ipfrag\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+runq-sz\\s+(\\S+)/ ) { & debug ( \"ParseSar found runq-sz: $1\" ); $ans { \"sar-runqsz\" } = $1 ; } if ( $line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+plist-sz\\s+(\\S+)/ ) { & debug ( \"ParseSar found plist-sz: $1\" ); $ans { \"sar-plistsz\" } = $1 ; } # ldavg-1 0.00 # if ($line =~ /\\S+\\s+\\S+\\s+\\S+\\s+\\S+\\s+ldavg-5\\s+(\\S+)/) { # &debug(\"ParseSar found ldavg-5: $1\"); # $ans{\"sar-ldavg5\"} = $1; # } } elsif ( $connection { \"osversion\" } =~ /&#94;solaris-/ ) { @lines = split ( /\\n/ , $line ); if ( $lines [ 1 ] =~ /pctusr\\s+pctsys\\s+pctwio\\s+pctidle\\s+runqsz.*ovszallocfail\\s+fiveminload\\s+fifteenminload/ ) { ( $ans { \"sar-pctusr\" }, $ans { \"sar-pctsys\" }, $ans { \"sar-pctwio\" }, $ans { \"sar-pctidle\" }, $ans { \"sar-runqsz\" }, $ans { \"sar-pctrunocc\" }, $ans { \"sar-breads\" }, $ans { \"sar-lreads\" }, $ans { \"sar-pctrcache\" }, $ans { \"sar-bwrits\" }, $ans { \"sar-lwrits\" }, $ans { \"sar-pctwcache\" }, $ans { \"sar-preads\" }, $ans { \"sar-pwrits\" }, $ans { \"sar-pswpins\" }, $ans { \"sar-pswpouts\" }, $ans { \"sar-bswins\" }, $ans { \"sar-bswots\" }, $ans { \"sar-pswchs\" }, $ans { \"sar-scalls\" }, $ans { \"sar-sreads\" }, $ans { \"sar-swrits\" }, $ans { \"sar-forks\" }, $ans { \"sar-execs\" }, $ans { \"sar-rchars\" }, $ans { \"sar-wchars\" }, $ans { \"sar-igets\" }, $ans { \"sar-nameis\" }, $ans { \"sar-dirbks\" }, $ans { \"sar-rawchs\" }, $ans { \"sar-canchs\" }, $ans { \"sar-outchs\" }, $ans { \"sar-rcvins\" }, $ans { \"sar-xmtins\" }, $ans { \"sar-mdmins\" }, $ans { \"sar-procsz\" }, $ans { \"sar-procszmax\" }, $ans { \"sar-procszov\" }, $ans { \"sar-inodsz\" }, $ans { \"sar-inodszmax\" }, $ans { \"sar-inodszov\" }, $ans { \"sar-filesz\" }, $ans { \"sar-fileszmax\" }, $ans { \"sar-fileszov\" }, $ans { \"sar-locksz\" }, $ans { \"sar-lockszmax\" }, $ans { \"sar-msgs\" }, $ans { \"sar-semas\" }, $ans { \"sar-runqsz\" }, $ans { \"sar-pctrunocc\" }, $ans { \"sar-pgouts\" }, $ans { \"sar-ppgouts\" }, $ans { \"sar-pgfrees\" }, $ans { \"sar-pgscans\" }, $ans { \"sar-pctufsipf\" }, $ans { \"sar-freemem\" }, $ans { \"sar-freeswap\" }, $ans { \"sar-smlmem\" }, $ans { \"sar-smlmemalloc\" }, $ans { \"sar-smlmemfail\" }, $ans { \"sar-lgmem\" }, $ans { \"sar-lgmemalloc\" }, $ans { \"sar-lgmemfail\" }, $ans { \"sar-ovszalloc\" }, $ans { \"sar-ovszallocfail\" }, $ans { \"sar-fiveminload\" }, $ans { \"sar-fifteenminload\" }) = split ( /\\s+/ , $lines [ 2 ]); & debug ( \"ParseSar found solaris collect_stats.pl output. 5 min load: \" . $ans { \"sar-fiveminload\" }); } else { & debug ( \"ParseSar couldnt parse collect_stats.pl output: $lines[1]\" ); } } else { if ( $SSHPERFstatus < 1 ) { $SSHPERFstatus = 1 ; $SSHPERFmessage = \"Couldn't parse sar output.\" ; & Log ( $SSHPERFmessage );} } } sub ParseSnmp () { my ( $test , $res ) = @_ ; & debug ( \"ParseSnmp: parsing: $res\" ); if ( $test eq \"snmp-winprocessorload\" ) { if ( $res =~ /hrProcessorLoad.1\\s+(\\d+)/ ) { & debug ( \"ParseSnmp: found processor load: $1\" ); $ans { $test } = $1 ; } } elsif ( $test eq \"snmp-winsystemnumusers\" ) { if ( $res =~ /hrSystemNumUsers.0\\s+(\\d+)/ ) { & debug ( \"ParseSnmp: found num users: $1\" ); $ans { $test } = $1 ; } } elsif ( $test eq \"snmp-winsystemprocesses\" ) { if ( $res =~ /hrSystemProcesses.0\\s+(\\d+)/ ) { & debug ( \"ParseSnmp: found num procs: $1\" ); $ans { $test } = $1 ; } } elsif ( $test eq \"snmp-wintcpcurrestab\" ) { if ( $res =~ /tcpCurrEstab.0\\s+(\\d+)/ ) { & debug ( \"ParseSnmp: found tcp established sessions: $1\" ); $ans { $test } = $1 ; } } elsif ( $test eq \"snmp-ioscpu5min\" ) { if ( $res =~ /enterprises.9.2.1.57.0\\s+(\\d+)/ ) { & debug ( \"ParseSnmp: found 5 min cpu: $1\" ); $ans { $test } = $1 ; } } elsif ( $test eq \"snmp-iosmem5minused\" ) { if ( $res =~ /enterprises.9.9.48.1.1.1.5.1\\s+(\\d+)/ ) { & debug ( \"ParseSnmp: found mem 5 min used: $1\" ); $ans { $test } = $1 ; } else { & debug ( \"ParseSnmp: couldn't parse: $res\" ); } } elsif ( $test eq \"snmp-iosmem5minfree\" ) { if ( $res =~ /enterprises.9.9.48.1.1.1.6.1\\s+(\\d+)/ ) { & debug ( \"ParseSnmp: found mem 5 min free: $1\" ); $ans { $test } = $1 ; } else { & debug ( \"ParseSnmp: couldn't parse: $res\" ); } } else { die ( \"Unknown snmp test\" ); } } sub ParseSnmpOid () { my ( $test , $res , $name ) = @_ ; & debug ( \"ParseSnmp: parsing: $res\" ); if ( $test =~ /snmp-oid-(\\S+)/ ) { my $testname = $1 ; if ( $res =~ /(.*)\\s+(\\d+)/ ) { & debug ( \"ParseSnmp: found $testname: $2\" ); $ans { $test } = $2 ; } } else { die ( \"snmp-oid failure: $test\" ); } } sub ParseInterface () { my ( $int , $line ) = @_ ; & debug ( \"ParseInterface: parsing: $line\" ); # Uptime: 247894 Threads: 29 Questions: 1238341 Slow queries: 3 Opens: 46 Flush tables: 1 Open tables: 39 Queries per second avg: 4.995 my @values = split ( /\\s+/ , $line ); ( $theint , $tmp ) = split ( \":\" , $values [ 1 ]); $ans { \"int-\" . $theint . \"-rxbytes\" } = $tmp ; $ans { \"int-\" . $theint . \"-rxpkts\" } = $values [ 2 ]; $ans { \"int-\" . $theint . \"-rxerrs\" } = $values [ 3 ]; $ans { \"int-\" . $theint . \"-txbytes\" } = $values [ 9 ]; $ans { \"int-\" . $theint . \"-txpkts\" } = $values [ 10 ]; $ans { \"int-\" . $theint . \"-txerrs\" } = $values [ 11 ]; & debug ( \"ParseInterface: found tx/rx bytes (\" . $ans { \"int-\" . $theint . \"-txbytes\" } . \"/\" . $ans { \"int-\" . $theint . \"-rxbytes\" } . \"), pkts (\" . $ans { \"int-\" . $theint . \"-txpkts\" } . \"/\" . $ans { \"int-\" . $theint . \"-rxpkts\" } . \"), errs (\" . $ans { \"int-\" . $theint . \"-txerrs\" } . \"/\" . $ans { \"int-\" . $theint . \"-rxerrs\" } . \")\" ); } sub ParseMysqlStatus () { my ( $line ) = @_ ; & debug ( \"ParseMysqlStat: parsing: $line\" ); # Uptime: 247894 Threads: 29 Questions: 1238341 Slow queries: 3 Opens: 46 Flush tables: 1 Open tables: 39 Queries per second avg: 4.995 if ( $line =~ /Uptime: (\\d+)\\s+Threads: (\\d+)\\s+Questions: (\\d+)\\s+Slow queries: (\\d+)\\s+Opens: (\\d+)\\s+Flush tables: (\\d+)\\s+Open tables: (\\d+)\\s+Queries per second avg: (\\S+)/ ) { $ans { \"mysql-uptime\" } = $1 ; $ans { \"mysql-threads\" } = $2 ; $ans { \"mysql-questions\" } = $3 ; $ans { \"mysql-slowqueries\" } = $4 ; $ans { \"mysql-opens\" } = $5 ; $ans { \"mysql-flushtables\" } = $6 ; $ans { \"mysql-opentables\" } = $7 ; $ans { \"mysql-queries\" } = $8 ; & debug ( \"ParseMysqlStat: found threads, opentables, questions: $2, $7, $3\" ); } else { if ( $SSHPERFstatus < 1 ) { $SSHPERFstatus = 1 ; $SSHPERFmessage = \"Couldn't parse mysql status.\" ; & Log ( $SSHPERFmessage );} & debug ( \"ParseMysqlStat: unable to parse mysql status\" ); $ans { \"mysql-uptime\" } = - 1 ; } } sub ParseUptime () { my ( $line ) = @_ ; # &debug(\"ParseUptime: parsing: $line\"); if ( $line =~ /load average: \\d+\\.\\d+, (\\d+\\.\\d+), (\\d+\\.\\d+)/ ) { $ans { \"load-5minave\" } = $1 ; $ans { \"load-15minave\" } = $2 ; debug ( \"ParseUptime: found 5min load: $1\" ); } else { if ( $SSHPERFstatus < 1 ) { $SSHPERFstatus = 1 ; $SSHPERFmessage = \"Couldn't parse uptime output.\" ; & Log ( $SSHPERFmessage );} } } sub ParseFree () { my ( $line ) = @_ ; @lines = split ( /\\n/ , $line ); # &debug(\"ParseFree: parsing\"); if ( $lines [ 2 ] =~ /&#94;Mem:\\s+(\\d+)\\s+\\d+\\s+(\\d+)\\s+\\d+\\s+\\d+\\s+\\d+/ ) { $ans { \"mem-total\" } = $1 ; $ans { \"mem-free\" } = $2 ; if ( $lines [ 4 ] =~ /&#94;Swap:\\s+(\\d+)\\s+\\d+\\s+(\\d+)/ ) { $ans { \"swap-total\" } = $1 ; $ans { \"swap-free\" } = $2 ; & debug ( \"ParseFree: found swap: (\" . $ans { \"swap-free\" } . \" / \" . $ans { \"swap-total\" } . \")\" ); & debug ( \"ParseFree: found free mem: (\" . $ans { \"mem-free\" } . \" / \" . $ans { \"mem-total\" } . \")\" ); } else { die ( \"ParseFree: parse swap error\\n\" ); } $ans { \"swap-freepct\" } = 100 * ( $ans { \"swap-free\" } / $ans { \"swap-total\" }); $ans { \"mem-freepct\" } = 100 * ( $ans { \"mem-free\" } / $ans { \"mem-total\" }); } else { if ( $SSHPERFstatus < 1 ) { $SSHPERFstatus = 1 ; $SSHPERFmessage = \"Couldn't parse free output.\" ; & Log ( $SSHPERFmessage );} } } sub ParseTop () { my ( $line ) = @_ ; @lines = split ( /\\n/ , $line ); & debug ( \"ParseTop: parsing: $lines[4]\" ); # Memory: 1024M real, 635M free, 230M swap in use, 922M swap free #Updated this 5/7/09 MAO to handle top upgrade #Remove dependency on line position of the Memory string, and allow for new labels: #Old format: # Memory: 16G real, 3798M free, 13G swap in use, 12G swap free #New format: # Memory: 32G phys mem, 28G free mem, 32G total swap, 32G free swap # comment out the old: # if ($lines[4] =~ /&#94;Memory:\\s+(\\S+)\\s+real,\\s+(\\S+)\\s+free,\\s+(\\S+)\\s+swap in use,\\s+(\\S+)\\s+swap free/) { # add this: foreach ( @lines ) { if ( $_ =~ /&#94;Memory:\\s+(\\S+)\\s+(?:\\S+\\s*)+\\,\\s+(\\S+)\\s(?:\\S+\\s*)+\\,\\s+(\\S+)\\s+(?:\\S+\\s*)+\\,\\s+(\\S+)/ ) { $ans { \"mem-total\" } = $1 ; $ans { \"mem-free\" } = $2 ; my $swapused = $3 ; # Fix 6/17/04 BAW # Need to match GB also $ans { \"swap-free\" } = $4 ; # This is for 100% free swap (diff string) # Memory: 1024M real, 635M free, 922M swap free # Comment out block below - MAO - THIS IS DEFUNCT #} elsif ($lines[4] =~ /&#94;Memory:\\s+(\\S+)\\s+real,\\s+(\\S+)\\s+free,\\s+(\\S+)\\s+swap free/) { # $ans{\"mem-total\"} = $1; # $ans{\"mem-free\"} = $2; # my $swapused = 0; # $ans{\"swap-free\"} = $3; $parsed_top = 1 ; } #else { } unless ( defined ( $parsed_top )) { if ( $SSHPERFstatus < 1 ) { $SSHPERFstatus = 1 ; $SSHPERFmessage = \"Couldn't parse top output.\" ; & Log ( $SSHPERFmessage );} return ; } #} if ( $ans { \"mem-total\" } =~ m/G$/ ) { $ans { \"mem-total\" } =~ s/G$// ; $ans { \"mem-total\" } *= 1024 ; } else { $ans { \"mem-total\" } =~ s/M$// ; } if ( $ans { \"mem-free\" } =~ m/G$/ ) { $ans { \"mem-free\" } =~ s/G$// ; $ans { \"mem-free\" } *= 1024 ; } else { $ans { \"mem-free\" } =~ s/M$// ; } if ( $swapused =~ m/G$/ ) { $swapused =~ s/G$// ; $swapused *= 1024 ; } else { $swapused =~ s/M$// ; } if ( $ans { \"swap-free\" } =~ m/G$/ ) { $ans { \"swap-free\" } =~ s/G$// ; $ans { \"swap-free\" } *= 1024 ; } else { $ans { \"swap-free\" } =~ s/M$// ; } $ans { \"swap-total\" } = $swapused + $ans { \"swap-free\" }; $ans { \"swap-total\" } = $ans { \"swap-total\" } * 1024 ; $ans { \"mem-total\" } = $ans { \"mem-total\" } * 1024 ; $ans { \"mem-free\" } = $ans { \"mem-free\" } * 1024 ; $ans { \"swap-free\" } = $ans { \"swap-free\" } * 1024 ; $ans { \"swap-freepct\" } = 100 * ( $ans { \"swap-free\" } / $ans { \"swap-total\" }); $ans { \"mem-freepct\" } = 100 * ( $ans { \"mem-free\" } / $ans { \"mem-total\" }); & debug ( \"ParseFree: found swap: (\" . $ans { \"swap-free\" } . \" / \" . $ans { \"swap-total\" } . \")\" ); & debug ( \"ParseFree: found free mem: (\" . $ans { \"mem-free\" } . \" / \" . $ans { \"mem-total\" } . \")\" ); } sub ParseDf () { my ( $line ) = @_ ; @lines = split ( /\\n/ , $line ); & debug ( \"ParseDf: parsing\" ); foreach $l ( @lines ) { next if ( $l =~ /&#94;Filesystem/ ); next if ( $l eq \"\" ); if ( $l =~ /&#94;(\\S+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\S+)\\s+(\\S+)$/ ) { $ans { \"disk-total-\" . $6 } = $2 ; $ans { \"disk-used-\" . $6 } = $3 ; $ans { \"disk-free-\" . $6 } = $4 ; $ans { \"disk-usedpct-\" . $6 } = $5 ; & debug ( \"ParseDf: found fs: $6 ($5)\" ); } else { #if ($SSHPERFstatus < 1) { $SSHPERFstatus = 1; $SSHPERFmessage = \"Couldn't parse df output.\"; &Log($SSHPERFmessage);} next ; } } } sub ParseLocalSmtp () { my ( $line , $host ) = @_ ; & debug ( \"ParseLocalSmtp: parsing: \" . $line ); if ( $line =~ /SMTP OK - (\\d+) second response time/ ) { $ans { \"local-check_smtp-\" . $host } = $1 ; & debug ( \"ParseLocalSmtp: OK: \" . $1 . \" second response time\" ); } elsif ( $line =~ /Invalid SMTP response received from host/ ) { $ans { \"local-check_smtp-\" . $host } = - 1 ; & debug ( \"ParseLocalSmtp: CRITICAL: invalid SMTP response\" ); if ( $SSHPERFstatus < 1 ) { $SSHPERFstatus = 1 ; $SSHPERFmessage = \"Invalid SMTP response\" ; & Log ( $SSHPERFmessage );} } elsif ( $line =~ /Connection refused by host/ ) { $ans { \"local-check_smtp-\" . $host } = - 2 ; & debug ( \"ParseLocalSmtp: CRITICAL: connection refused by host\" ); if ( $SSHPERFstatus < 2 ) { $SSHPERFstatus = 2 ; $SSHPERFmessage = \"Connection refused by host\" ; & Log ( $SSHPERFmessage );} } else { $ans { \"local-check_smtp-\" . $host } = - 3 ; & debug ( \"ParseLocalSmtp: CRITICAL: unknown error\" ); if ( $SSHPERFstatus < 2 ) { $SSHPERFstatus = 2 ; $SSHPERFmessage = \"Unknown error\" ; & Log ( $SSHPERFmessage );} } } sub ReadConfig { & debug ( \"ReadConfig: Reading config from file: $CFGFILE\" ); if ( ! open ( CFILE , $CFGFILE )) { & debug ( \"Fatal: Couldn't open config file: $CFGFILE\" ); exit ( 1 ); } my $l = 0 ; while ( <CFILE> ) { $l ++ ; next if ( /&#94;#/ ); next if ( /&#94;$/ ); my ( $val , @args ) = split ; if ( 0 ) { } elsif ( $val eq \"proc-exists\" ) { $tests { $val . \"-\" . $args [ 1 ]} = $args [ 0 ] . \"~\" . $args [ 1 ]; } elsif ( $val eq \"load-5minave\" ) { $tests { $val } = $args [ 0 ] . \"~\" . $args [ 1 ]; } elsif ( $val eq \"cpu-idlepct\" ) { $tests { $val } = $args [ 0 ] . \"~\" . $args [ 1 ]; } elsif ( $val eq \"mem-free\" ) { $tests { $val } = $args [ 0 ] . \"~\" . $args [ 1 ]; } elsif ( $val eq \"swap-free\" ) { $tests { $val } = $args [ 0 ] . \"~\" . $args [ 1 ]; } elsif ( $val eq \"mem-freepct\" ) { $tests { $val } = $args [ 0 ] . \"~\" . $args [ 1 ]; } elsif ( $val eq \"swap-freepct\" ) { $tests { $val } = $args [ 0 ] . \"~\" . $args [ 1 ]; } elsif ( $val eq \"disk-usedpct\" ) { $tests { $val . \"-\" . $args [ 2 ]} = $args [ 0 ] . \"~\" . $args [ 1 ]; } elsif ( $val =~ /&#94;sar-/ ) { $tests { $val } = $args [ 0 ] . \"~\" . $args [ 1 ]; } elsif ( $val eq \"snmp-oid\" ) { $tests { $val . \"-\" . $args [ 5 ]} = $args [ 0 ] . \"~\" . $args [ 1 ] . \"~\" . $args [ 2 ] . \"~\" . $args [ 3 ] . \"~\" . $args [ 4 ]; } elsif ( $val =~ /&#94;snmp-/ ) { $tests { $val } = $args [ 0 ] . \"~\" . $args [ 1 ] . \"~\" . $args [ 2 ] . \"~\" . $args [ 3 ]; } elsif ( $val =~ /&#94;int-/ ) { $tests { $val } = 1 ; } elsif ( $val eq \"local-check_smtp\" ) { $a = shift ( @args ); $b = shift ( @args ); $tests { $val . \"-\" . $a } = $b ; } elsif ( $val eq \"hostname\" ) { if ( ! $SNMPHOST ) { $connection { \"hostname\" } = $args [ 0 ]; } else { $connection { \"hostname\" } = $SNMPHOST ; } } elsif ( $val eq \"connect\" ) { $connection { \"host\" } = $args [ 0 ]; $connection { \"user\" } = $args [ 1 ]; $connection { \"key\" } = $args [ 2 ]; } elsif ( $val eq \"connectextra\" ) { $connection { \"extra\" } = join ( \" \" , @args ); } elsif ( $val eq \"osversion\" ) { $connection { \"osversion\" } = $args [ 0 ]; } elsif ( $val eq \"debug\" ) { $DEBUG = 1 ; } elsif ( $val eq \"mysql-status\" ) { $tests { $val } = join ( \"~\" , @args ); } else { die ( \"config file error on line $l: unknown statement: $_\\n\" ); } # XXX NEW } close ( CFILE ); & debug ( \"ReadConfig: Done reading config from file: $CFGFILE\" ); } sub debug { my ( $message ) = @_ ; printf stderr \"debug: \" . $message . \"\\n\" if $DEBUG ; } sub Log { my ( $entry ) = @_ ; # if (open(LOGFILE, \">>$LOGFILE\")) { # (@ctime) = localtime(time); # printf LOGFILE (\"%02d/%02d/%02d %02d:%02d\\t$entry\\n\", $ctime[4]+1, $ctime[3], $ctime[5]+1900, $ctime[2], $ctime[1]); # close LOGFILE; # } & debug ( \"Log: $entry\\n\" ); } sub SubmitPassive { my ( $description , $returncode , $text ) = @_ ; my $h ; open ( ECF , \">>$ECFFILE\" ) || die ( \"Couldn't open $ECFFILE: $!\\n\" ); # $returncode = $SSHPERFstatus; if ( $returncode == 0 ) { $ret = \"OK\" ; } elsif ( $returncode == 1 ) { $ret = \"WARNING\" ; } elsif ( $returncode == 2 ) { $ret = \"CRITICAL\" ; } elsif ( $returncode == 3 ) { $ret = \"UNKNOWN\" ; } else { $ret = \"UNKNOWN\" ; } if ( $connection { \"hostname\" }) { $h = $connection { \"hostname\" }; } else { $h = $connection { \"host\" }; } print ECF ( \"[\" . time . \"] PROCESS_SERVICE_CHECK_RESULT;\" . $h . \";\" . $description . \";$returncode;$description $ret - \" . $text . \"\\n\" ); & Log ( \"[\" . time . \"] PROCESS_SERVICE_CHECK_RESULT;\" . $h . \";\" . $description . \";$returncode;$description $ret - \" . $text ); print ( \"[\" . time . \"] PROCESS_SERVICE_CHECK_RESULT;\" . $h . \";\" . $description . \";$returncode;$description $ret - \" . $text . \"\\n\" ); & Log ( \"[\" . time . \"] PROCESS_SERVICE_CHECK_RESULT;\" . $h . \";\" . $description . \";$returncode;$description $ret - \" . $text ); close ECF ; }","tags":"Unix","title":"Draft - Nagios Check_sshperf"},{"url":"http://justlearningdjango.com/draft-ping-check.html","text":"Scanning for available IP's So I worked for a company that had some aversion to using DNS for its server subnets...I have no freaking idea why! The task was to take this manually created list of IP addresses that had been assigned or reserved for some reason at some point in the past and validate that they were valid of if they werent. for the record - nmap will do this in a jiff #!/bin/bash OUTFILE = host-results IPFILE = hosts.txt if [ -e $OUTFILE ] then rm $OUTFILE fi for I in ` cat $IPFILE ` do echo \"-------------- CHECKING $ I ----------------\" >> $OUTFILE echo \"Checking $ I\" >> $OUTFILE DNS = ` host $I ` if [ $? == 0 ] then echo \" $ I is in DNS -> $D NS\" >>$OUTFILE else echo \" $ I is NOT in DNS.\" >> $OUTFILE fi PING = ` ping -c 2 $I ` if [ $? == 0 ] then echo \" $ I is pinging -- IP in use.\" >> $OUTFILE else echo \" $ I is NOT pinging -- IP is likely free.\" >> $OUTFILE fi echo \"---------------- DONE CHECKING $ I ------------\" >> $OUTFILE done","tags":"Unix","title":"Draft - Ping Check"},{"url":"http://justlearningdjango.com/draft-setup-sftp-user.html","text":"Setup new user - generate password The company I worked at had an externally facing SFTP server I built with a chroot jail. I wrote this script to automate creating new user accounts as well as defining a default password ala a random generator. #!/usr/bin/python import os import string import sys import re import random import datetime from subprocess import Popen , PIPE print \"\"\" Hello...this script will assist with configuring users on the sftp server We will need to gather some information first. \"\"\" def executeShellCommand ( cmd ): stdOut = '' errOut = '' p = Popen ( cmd , stderr = PIPE , stdout = PIPE , shell = True ) return_code = p . wait () for line in p . stdout : stdOut += line . rstrip () + ' \\n ' for line in p . stderr : errOut += line . rstrip () + ' \\n ' return return_code , stdOut , errOut def passwordGenerator (): pwLength = 9 password = [] punctuation = [ '#' , '@' , '&#94;' , '*' ] for grp in ( string . ascii_letters , punctuation , string . digits ): password += random . sample ( grp , 3 ) password += random . sample ( string . ascii_letters + string . punctuation + string . digits , pwLength - len ( password )) random . shuffle ( password ) password = '' . join ( password ) return password def createUser ( userName , tempUser , accountExpiresOn , sftpOnly , userPassword ): createUserCmd = string . join ([ 'useradd -c \"Generated User - ' + userName + '\"' , userName ]) modifyUserDir = string . join ([ 'usermod -d /' + userName , userName ]) createUserDir = string . join ([ 'mkdir /chroot/' + userName , ';mkdir /chroot/' + userName + '/incoming ; mkdir /chroot/' + userName + '/outgoing' ]) chownUserDir = string . join ([ 'chown -R ' , userName , '/chroot/' + userName ]) return_code , stdout , stderr = executeShellCommand ( createUserCmd ) if return_code == 0 : print \"Created user account\" else : print \"Failed to create user account\" , str ( stdout ), str ( stderr ) sys . exit ( 1 ) return_code , stdout , stderr = executeShellCommand ( modifyUserDir ) if return_code == 0 : print \"Updated userdir to use chroot\" else : print \"Failed to update user directory in /etc/passwd\" , str ( stdout ), str ( stderr ) sys . exit ( 1 ) print \"Creating userdir in chroot\" return_code , stdout , stderr = executeShellCommand ( createUserDir ) if return_code == 0 : print \"Created user directory\" else : print \"Failed to create user direcotry in /chroot\" , str ( stdout ), str ( stderr ) sys . exit ( 1 ) print \"Modifying ownership of chroot homedir\" return_code , stdout , stderr = executeShellCommand ( chownUserDir ) if return_code == 0 : print \"Modified ownership of chroot home directory\" else : print \"Failed to chown the home directory\" , str ( stdout ), str ( stderr ) sys . exit ( 1 ) if sftpOnly == True : print \"Adding user to sftponly group\" sftpGrpCmd = string . join ([ 'usermod -G sftponly' , userName ]) return_code , stdout , stderr = executeShellCommand ( sftpGrpCmd ) if return_code == 0 : print \"updated group membership for user to use sftponly\" else : print \"Failed to update group membership\" , str ( stdout ), str ( stderr ) sys . exit ( 1 ) if tempUser == True : print \"Setting Expiration on account\" expireAcctCmd = string . join ([ 'usermod -e' , str ( accountExpiresOn ), userName ]) return_code , stdout , stderr = executeShellCommand ( expireAcctCmd ) if return_code == 0 : print \"Users account has been set to expire on\" , str ( accountExpiresOn ) else : print \"Failed to update expiration date on the user account\" , str ( stdout ), str ( stderr ) sys . exit ( 1 ) else : print \"Setting account to never expire\" passwordSetCommand = string . join ([ 'echo \"' + userPassword + '\"| passwd --stdin' , userName ]) return_code , stdout , stderr = executeShellCommand ( passwordSetCommand ) if return_code == 0 : print \"Checked the strength of the password with cracklib-check\" else : print \"Failed to set user password\" , str ( stdout ), str ( stderr ) sys . exit ( 1 ) print \"\"\" -------------------------------------- -------------------------------------- \"\"\" print \"The account is setup.\" print \"You will want to send the information below to the user\" print \"-------------------------\" print \"ServerName: sftp.graebel.com\" print \"Username: \" , userName print \"Password: \" , userPassword print \"-------------------------\" def setPassword (): \"\"\" for this to work we will need to use Popen to captre stdout and stderr to see what the actual result of cracklib-check was \"\"\" stdout = '' errout = '' genPW = raw_input ( \"Would you like to generate a password? [y|n]\" ) if re . match ( 'y|Y' , genPW ): userPassword = passwordGenerator () else : userPassword = raw_input ( \"Enter password for new user:\" ) ckPWStrength = string . join ([ 'echo \\\" ' , userPassword , '\"| cracklib-check' ]) return_code , stdout , stderr = executeShellCommand ( ckPWStrength ) if return_code == 0 : if re . match ( '&#94;' + userPassword + ': OK' , stdout ): print \"Your password seems to be complex enough\" , str ( stdout ) else : print \"The password choosen does not meet the system requirements. YOU NEED TO CHOOSE ANOTHER PW or let us create one\" , str ( stdout ) print stdout setPassword () return userPassword def setupNewUser (): if os . geteuid () != 0 : print \"You need to run this script with root privileges\" sys . exit ( 1 ) userName = raw_input ( \"What username should we use? [string 6-8 characters]: \" ) tempUser = raw_input ( \"Is this a Temp User? [y|n]\" ) if re . match ( 'y|Y' , tempUser ): print \"User account will be set to expire.\" tempUser = True expireInDays = raw_input ( \"How many days until account expires? [enter a digit]: \" ) expireInDays = int ( expireInDays ) accountExpiresOn = datetime . date . today () + datetime . timedelta ( days = expireInDays ) print \"The account will expire on :\" + str ( accountExpiresOn ) else : tempUser = False expireInDays = 0 accountExpiresOn = 'NEVER' print \"This account will NOT expire\" sftpOnly = raw_input ( \"Will this user be just sftp? [y|n]\" ) if re . match ( 'y|Y' , sftpOnly ): print \"User will only be able to sftp to the server\" sftpOnly = True else : sftpOnly = False userPassword = setPassword () print \"\"\" Please review the information below: \"\"\" print \"Username: \" , userName print \"Temp User? \" , tempUser print \"Account Expires on: \" , accountExpiresOn print \"SFTP Only? \" , sftpOnly print \"Password: \" , userPassword print \"\"\" ------------------------------------ \"\"\" answer = raw_input ( \"Continue? [y|n]\" ) if re . match ( 'y|Y' , answer ): createUser ( userName , tempUser , accountExpiresOn , sftpOnly , userPassword ) else : setupNewUser () if __name__ == '__main__' :","tags":"Unix","title":"Draft - Setup SFTP User"},{"url":"http://justlearningdjango.com/notes-finding-real-memory-usage-solaris.html","text":"Finding the real memory in use [ 10:30:35 pststapp03 ] ~ $ sudo mdb -k Loading modules: [ unix krtld genunix specfs dtrace ufs sd px ssd fcp fctl md qlc ip hook neti sctp arp usba lofs zfs random nfs crypto ipc ptm logindmux cpc fcip ] > ::memstat Page Summary Pages MB %Tot ------------ ---------------- ---------------- ---- Kernel 133624 1043 3% <------OS and others ( vxfs cache ) Anon 57146 446 1% Exec and libs 22366 174 1% Page cache 359381 2807 9% <------UFS cache stuff Free ( cachelist ) 733145 5727 18% Free ( freelist ) 2865356 22385 69% Total 4171018 32586 Physical 4104612 32067 [ 10:29:01 pststapp03 ] ~ $ vmstat 1 kthr memory page disk faults cpu r b w swap free re mf pi po fr de sr m1 m1 m1 m2 in sy cs us sy id 0 0 0 41581664 31079760 242 191 13 6 4 0 1 2 2 2 2 793 3212 892 1 0 99 0 0 0 41385720 28277640 11 19 0 0 0 0 0 0 0 0 0 545 652 551 0 0 100 0 0 0 41385528 28277536 0 1 0 0 0 0 0 0 0 0 0 535 512 521 0 0 99 0 0 0 41385528 28277536 0 0 0 0 0 0 0 0 0 0 0 568 491 578 0 1 99 0 0 0 41385528 28277536 0 0 0 0 0 0 0 0 0 0 0 531 552 553 0 1 99 0 0 0 41385528 28277536 0 1 0 0 0 0 0 0 0 0 6 599 1660 601 0 1 99 [ 10:37:23 pststapp03 ] ~ $ echo 'scale=2; 28277072/1024/1024' | bc 26.96","tags":"Unix","title":"Notes - Finding Real Memory Usage - Solaris"},{"url":"http://justlearningdjango.com/notes-selinux.html","text":"Notes on SELinux ## Very cool way to find out how to write policy: ## ## To create a policy using messages from avc: Use audit2allow, which transforms audit messages from alerts to loadable modules So, this /var/log/messages alert: Aug 7 07:22:19 rastamon1 setroubleshoot: SELinux is preventing /usr/libexec/postfix/local ( postfix_local_t ) \"write\" to cricket ( mail_spool_t ) . For complete SELinux messages. run sealert -l 1afcc5f6-d4a8-47e6-b546-b2ec3b427f18 Shows this in sealert: [ 07:25:12 rastamon1 ] tmp $ sealert -l 1afcc5f6-d4a8-47e6-b546-b2ec3b427f18 Summary SELinux is preventing /usr/libexec/postfix/local ( postfix_local_t ) \"write\" to cricket ( mail_spool_t ) . Detailed Description SELinux denied access requested by /usr/libexec/postfix/local. It is not expected that this access is required by /usr/libexec/postfix/local and this access may signal an intrusion attempt. It is also possible that the specific version or configuration of the application is causing it to require additional access. Allowing Access Sometimes labeling problems can cause SELinux denials. You could try to restore the default system file context for cricket, restorecon -v cricket If this does not work, there is currently no automatic way to allow this access. Instead, you can generate a local policy module to allow this access - see http://fedora.redhat.com/docs/selinux-faq-fc5/#id2961385 Or you can disable SELinux protection altogether. Disabling SELinux protection is not recommended. Please file a http://bugzilla.redhat.com/bugzilla/enter_bug.cgi against this package. Additional Information Source Context user_u:system_r:postfix_local_t Target Context system_u:object_r:mail_spool_t Target Objects cricket [ file ] Affected RPM Packages postfix-2.3.3-2 [ application ] Policy RPM selinux-policy-2.4.6-30.el5 Selinux Enabled True Policy Type targeted MLS Enabled True Enforcing Mode Enforcing Plugin Name plugins.catchall_file Host Name rastamon1 Platform Linux rastamon1 2.6.18-8.1.6.el5 #1 SMP Fri Jun 1 18:52:13 EDT 2007 x86_64 x86_64 Alert Count 7676 Line Numbers Raw Audit Messages avc: denied { write } for comm = \"local\" dev = dm-1 egid = 650 euid = 650 exe = \"/usr/libexec/postfix/local\" exit = -13 fsgid = 650 fsuid = 650 gid = 0 items = 0 name = \"cricket\" pid = 25939 scontext = user_u:system_r:postfix_local_t:s0 sgid = 0 subj = user_u:system_r:postfix_local_t:s0 suid = 0 tclass = file tcontext = system_u:object_r:mail_spool_t:s0 tty =( none ) uid = 0 # Basically, postfix can't write to /var/spool/mail/cricket [ 07:26:30 rastamon1 ] tmp $ ls -alZ /var/spool/mail/ drwxrwxr-x root mail system_u:object_r:mail_spool_t . drwxr-xr-x root root system_u:object_r:var_spool_t .. -rw------- cricket mail system_u:object_r:mail_spool_t cricket -rw------- maorstea mail system_u:object_r:mail_spool_t maorstea -rw------- rfitch mail system_u:object_r:mail_spool_t rfitch -rw------- root root system_u:object_r:mail_spool_t root # So run audit2allow, and generate a te file: [ 07:36:29 rastamon1 ] tmp $ sudo audit2allow -a -m postfixlocal > postfixlocal.te [ 07:37:22 rastamon1 ] tmp $ cat postfixlocal.te module postfixlocal 1.0 ; require { class file write ; type mail_spool_t ; type postfix_local_t ; role system_r ; } ; allow postfix_local_t mail_spool_t:file write ; # And compile it: [ 07:37:25 rastamon1 ] tmp $ sudo checkmodule -M -m -o postfixlocal.mod postfixlocal.te checkmodule: loading policy configuration from postfixlocal.te checkmodule: policy configuration loaded checkmodule: writing binary representation ( version 6 ) to postfixlocal.mod # and create a policy package: [ 07:37:47 rastamon1 ] tmp $ semodule_package -o postfixlocal.pp -m postfixlocal.mod # Now we have the ingredients: [ 07:38:39 rastamon1 ] tmp $ file postfixlo* postfixlocal.mod: data postfixlocal.pp: data postfixlocal.te: ASCII C++ program text # Load the policy to the kernel [ 07:38:46 rastamon1 ] tmp $ sudo semodule -i postfixlocal.pp cricket homedir /usr/local/monitoring or its parent directory conflicts with a defined context in /etc/selinux/targeted/contexts/files/file_contexts, /usr/sbin/genhomedircon will not create a new context. This usually indicates an incorrectly defined system account. If it is a system account please make sure its login shell is /sbin/nologin. ## The above messages did not interfere with the load of the policy: [ 07:44:14 rastamon1 ] / $ sudo semodule -l amavis 1.1.0 ccs 1.0.0 clamav 1.1.0 dcc 1.1.0 evolution 1.1.0 iscsid 1.0.0 mozilla 1.1.0 mplayer 1.1.0 nagios 1.1.0 oddjob 1.0.1 pcscd 1.0.0 postfixlocal 1.0 <------------ module loaded =] pyzor 1.1.0 razor 1.1.0 ricci 1.0.0 smartmon 1.1.0 ## Also, we can load the module to another server: [ 07:47:50 rastamon1 ] tmp $ scp postfixlocal.pp rastamon2:/var/tmp maorstea@rastamon2 's password: postfixlocal.pp 100% 1017 1.0KB/s 00:00 [07:48:37 rastamon2] tmp $ sudo semodule -i postfixlocal.pp Password: cricket homedir /usr/local/monitoring or its parent directory conflicts with a defined context in /etc/selinux/targeted/contexts/files/file_contexts, /usr/sbin/genhomedircon will not create a new context. This usually indicates an incorrectly defined system account. If it is a system account please make sure its login shell is /sbin/nologin. [07:49:02 rastamon2] tmp $ sudo semodule -l |grep postfixlocal postfixlocal 1.0 ### From audit2allow man page: [Note] Important In order to load this newly created policy package into the kernel, you are required to execute semodule -i local.pp Note that if you later install another module called local, it will replace this module. If you want to keep these rules around, then you either need to append future customizations to this local.te, or give future customizations a different name. ### ### Following installation of 5.1 patches (new security pol files) Received the following messages from ### various commands: [12:27:52 kroker] ~ $ ssh localhost /etc/selinux/targeted/contexts/files/file_contexts: Multiple same specifications for /usr/local/lost\\+found/.*. /etc/selinux/targeted/contexts/files/file_contexts: Multiple same specifications for /usr/local/\\.journal. /etc/selinux/targeted/contexts/files/file_contexts: Multiple same specifications for /usr/local/lost\\+found. ## Now, the file above: file_contexts had no dups, but there were duplicate entries between it and ## the sister file file_contextx.homedirs ### removed the following from the homedirs files: /usr/local/\\.journal <<none>> /usr/local/lost\\+found -d system_u:object_r:lost_found_t:s0 /usr/local/lost\\+found/.* <<none>> ## that worked, no need to restart restorecond #### Now - separate issue: ssh borken ## here' s what was updated [ 13:06:23 kroker ] log # grep ssh /var/log/yum.log Nov 14 09:45:03 Updated: openssh.x86_64 4.3p2-24.el5 Nov 14 09:46:54 Updated: openssh-askpass.x86_64 4.3p2-24.el5 Nov 14 09:46:54 Updated: openssh-clients.x86_64 4.3p2-24.el5 Nov 14 09:46:54 Updated: openssh-server.x86_64 4.3p2-24.el5 ##after checking a bunch of ssh files, from rpm -ql on the installed packages, removed all openssh ## and then installed the earlier version, and then it worked.","tags":"Linux","title":"Notes - SELinux"},{"url":"http://justlearningdjango.com/notes-solaris-zones.html","text":"Solaris Zones - quick notes","tags":"Unix","title":"Notes - Solaris Zones"},{"url":"http://justlearningdjango.com/notes-vim-tricks.html","text":"swiped from http://www.zinkwazi.com/unix/notes/tricks.vim.html Where grep came from (RE being Regular Expression): :g/RE/p Delete lines 10 to 20 inclusive: :10,20d or with marks a and b: : 'a,' bd Delete lines that contain pattern: :g/pattern/d Delete all empty lines: :g/&#94;$/d Delete lines in range that contain pattern: :20,30/pattern/d or with marks a and b: : 'a,' b/pattern/d Substitute all lines for first occurance of pattern: :%s/pattern/new/ :1,$s/pattern/new/ Substitute all lines for pattern globally (more than once on the line): :%s/pattern/new/g :1,$s/pattern/new/g Find all lines containing pattern and then append -new to the end of each line: :%s/ \\( .*pattern.* \\) / \\1 -new/g Substitute range: :20,30s/pattern/new/g with marks a and b: : 'a,' bs/pattern/new/g Swap two patterns on a line: :s/ \\( pattern1 \\)\\( pattern2 \\) / \\2\\1 / Capitalize the first lowercase character on a line: :s/ \\( [ a-z ] \\) / \\u\\1 / more concisely: :s/ [ a-z ] / \\u & / Capitalize all lowercase characters on a line: :s/ \\( [ a-z ] \\) / \\u\\1 /g more concisely: :s/ [ a-z ] / \\u & /g Capitalize all characters on a line: :s/ \\( .* \\) / \\U\\1\\E / Capitalize the first character of all words on a line: :s/ \\< [ a-z ] / \\u & /g Uncapitalize the first character of all words on a line: :s/ \\< [ A-Z ] / \\l & /g Change case of character under cursor: ~ Change case of all characters on line: g~~ Change case of remaining word from cursor: g~w Turn on line numbering: :set nu Turn it off: :set nonu Number lines (filter the file through a unix command and replace with output): :%!cat -n Sort lines: :%!sort Sort and uniq: :%!sort -u Read output of command into buffer: :r !ls -l Refresh file from version on disk: :e! Set textwidth for automatic line-wrapping as you type: :set textwidth = 80 Turn on syntax highlighting :syn on Turn it off: :syn off Force the filetype for syntax highlighting: :set filetype = python :set filetype = c :set filetype = php Use lighter coloring scheme for a dark background: :set background = dark Htmlize a file using the current syntax highlighting: ``` bash :so $VIMRUNTIME/syntax/2html.vim Or, htmlize from a command prompt: in 2html.sh put: #!/bin/sh vim -n -c ':so $VIMRUNTIME/syntax/2html.vim' -c ':wqa' $1 > /dev/null 2> /dev/null Now just run: shell> 2html.sh foo.py","tags":"Unix","title":"Notes - VIM Tricks"},{"url":"http://justlearningdjango.com/notes-zfs-commands.html","text":"ZFS Basic commands ## ## External resources: http://www.solarisinternals.com/wiki/index.php/ZFS_Best_Practices_Guide ## ## Create a file system in an existing pool: [ 07:02:40 nxdev2 ] ~ $ zpool list NAME SIZE USED AVAIL CAP HEALTH ALTROOT tank 68G 21.5G 46.5G 31% ONLINE - [ 07:02:43 nxdev2 ] ~ $ zfs list NAME USED AVAIL REFER MOUNTPOINT tank 21.5G 45.4G 24.5K /tank tank/db01 3.28G 45.4G 3.28G /db01 tank/twtc 18.2G 45.4G 28.5K /twtc tank/twtc/nxvsm 13.7G 45.4G 13.7G /twtc/nxvsm tank/twtc/nxvsmac 2.21G 45.4G 2.21G /twtc/nxvsmac tank/twtc/nxvsmgc 2.32G 45.4G 2.32G /twtc/nxvsmgc ### Create a new zfs file system - for /export/home/ 500m quota on the fs sudo zfs create tank/exhome sudo zfs create tank/exhome/awood sudo zfs set mountpoint = /export/home tank/exhome sudo zfs set quota = 100m tank/exhome/awood sudo zfs set quota = 500m tank/exhome [ 07:13:24 nxdev2 ] ~ $ zfs list NAME USED AVAIL REFER MOUNTPOINT tank 21.5G 45.4G 24.5K /tank tank/db01 3.28G 45.4G 3.28G /db01 tank/exhome 51.5K 500M 25.5K /export/home tank/exhome/awood 26K 100M 26K /export/home/awood tank/twtc 18.2G 45.4G 28.5K /twtc tank/twtc/nxvsm 13.7G 45.4G 13.7G /twtc/nxvsm tank/twtc/nxvsmac 2.21G 45.4G 2.21G /twtc/nxvsmac tank/twtc/nxvsmgc 2.32G 45.4G 2.32G /twtc/nxvsmgc [ 08:29:31 nxdev2 ] share $ zfs list tank/exhome tank/exhome/awood NAME USED AVAIL REFER MOUNTPOINT tank/exhome 51.5K 500M 25.5K /export/home tank/exhome/awood 26K 100M 26K /export/home/awood #### Use zfs status to show the disks that make up a pool: [ 08:30:54 nxdev2 ] share $ zpool status tank pool: tank state: ONLINE scrub: scrub completed with 0 errors on Mon Dec 3 07:23:04 2007 config: NAME STATE READ WRITE CKSUM tank ONLINE 0 0 0 mirror ONLINE 0 0 0 c1t2d0 ONLINE 0 0 0 c1t3d0 ONLINE 0 0 0 errors: No known data errors ## To initiate a block scrub to check for errors, run: sudo zpool scrub tank ## Snapshots: # set up compression: sudo zfs set compression = on tank/exhome # show some of the filesystem attributes: [ 08:35:05 nxdev2 ] share $ zfs get compression,quota tank/exhome NAME PROPERTY VALUE SOURCE tank/exhome compression on local tank/exhome quota 500M local # to show all, hey, use 'all' ---> zfs show all tank/exhome # create a snap shot, with just the changes today. [ 08:39:10 nxdev2 ] share $ sudo zfs snapshot tank/exhome@snap1 [ 08:42:39 nxdev2 ] share $ zfs list NAME USED AVAIL REFER MOUNTPOINT tank 21.5G 45.4G 24.5K /tank tank/db01 3.28G 45.4G 3.28G /db01 tank/exhome 51.5K 500M 25.5K /export/home tank/exhome@snap1 0 - 25.5K - tank/exhome/awood 26K 100M 26K /export/home/awood tank/twtc 18.2G 45.4G 28.5K /twtc tank/twtc/nxvsm 13.7G 45.4G 13.7G /twtc/nxvsm tank/twtc/nxvsmac 2.21G 45.4G 2.21G /twtc/nxvsmac tank/twtc/nxvsmgc 2.32G 45.4G 2.32G /twtc/nxvsmgc [ 08:42:41 nxdev2 ] share $ ls -al /export/home/. ./ ../ # the snapshot is empty - no files were there ZFS Root # documenting steps to setup zfs root via jumpstart. ## TODO testing: play with boot -Z from PROM - list datasets play with boot -L from PROM - list BE 's boot alternate disk validate path with prtconf -vp |grep bootpath test primary disk failure... this is a potential ' con '. if the primary mirror disk fails, we' ll need to take downtime to repair. Architecturally, this means maybe we should consider 3 disk mirrors. *Action - contact SUN to find out plan for this not being an issue ( hot-swap of primary root disk ) test adding a 3rd mirror-disk play with root snapshots - send to NFS or other server... - roll back local ; roll back NFS - bare-metal restore to alt hardware ( DR ) ## Considerations: -Any non-root zfs file systems we want need to be created early in the JS cycle, if they are for post JS install ( such as creating /export/home early in a separate zpool ) --Due to CR 6724860, you must run savecore manually to save a crash dump when using a ZFS dump volume. ( check with Conrad Geiger re: this ) ## Here's the extent of the modifications to the profile (first run): [ 08:58:40 infraprdapp01 ] PROFILES $ diff pststapp01.profile pststapp01.profile.orig_jumpstart 5,6c5,11 < pool rootpool auto auto auto mirror c1t0d0s0 c1t1d0s0 < bootenv installbe bename zfsroot dataset /var --- > partitioning explicit > filesys mirror:d10 c1t0d0s0 c1t1d0s0 10240 / > filesys mirror:d20 c1t0d0s1 c1t1d0s1 32768 swap > filesys mirror:d30 c1t0d0s3 c1t1d0s3 12288 /var > filesys mirror:d40 c1t0d0s4 c1t1d0s4 12288 /export/home > metadb c1t0d0s7 size 8192 count 3 > metadb c1t1d0s7 size 8192 count 3 ## The allocations above automatically partitioned a full slice 0 on the two disks. ## If additional devices are added later, they will prolly need to be explicitly partitioned ## By running zfs history, post-install, we can see the commands that were run to create the ## root zpool: -bash-3.00# zpool history History for 'rootpool' : 2009-07-09.07:54:43 zpool create -f -o failmode = continue -R /a -m legacy -o cachefile = /tmp/root/etc/zfs/zpool.cache rootpool mirror c1t0d0s0 c1t1d0s0 2009-07-09.07:54:44 zfs set canmount = noauto rootpool 2009-07-09.07:54:45 zfs set mountpoint = /rootpool rootpool 2009-07-09.07:54:45 zfs create -o mountpoint = legacy rootpool/ROOT 2009-07-09.07:54:46 zfs create -b 8192 -V 2048m rootpool/swap 2009-07-09.07:54:47 zfs create -b 131072 -V 1536m rootpool/dump 2009-07-09.07:55:06 zfs create -o canmount = noauto rootpool/ROOT/zfsroot 2009-07-09.07:55:07 zfs create -o canmount = noauto rootpool/ROOT/zfsroot/var 2009-07-09.07:55:08 zpool set bootfs = rootpool/ROOT/zfsroot rootpool 2009-07-09.07:55:09 zfs set mountpoint = / rootpool/ROOT/zfsroot 2009-07-09.07:55:09 zfs set canmount = on rootpool 2009-07-09.07:55:10 zfs create -o mountpoint = /export rootpool/export 2009-07-09.07:55:11 zfs create rootpool/export/home ## The ZFS pool version: -bash-3.00# zpool upgrade This system is currently running ZFS pool version 10. All pools are formatted using this version. ## Post install, here's what everything looked like: -bash-3.00# zpool list NAME SIZE USED AVAIL CAP HEALTH ALTROOT rootpool 136G 4.14G 132G 3% ONLINE - -bash-3.00# zpool status pool: rootpool state: ONLINE scrub: none requested config: NAME STATE READ WRITE CKSUM rootpool ONLINE 0 0 0 mirror ONLINE 0 0 0 c1t0d0s0 ONLINE 0 0 0 c1t1d0s0 ONLINE 0 0 0 errors: No known data errors -bash-3.00# zfs list NAME USED AVAIL REFER MOUNTPOINT rootpool 6.14G 128G 94K /rootpool rootpool/ROOT 2.63G 128G 18K legacy rootpool/ROOT/zfsroot 2.63G 128G 2.43G / rootpool/ROOT/zfsroot/var 214M 128G 214M /var rootpool/dump 1.50G 128G 1.50G - rootpool/export 38K 128G 20K /export rootpool/export/home 18K 128G 18K /export/home rootpool/swap 2G 130G 16K - ## Note that the default sizing for swap and dump sized them at 2G and 1.5G respectively: pool rootpool auto auto auto mirror c1t0d0s0 c1t1d0s0 ( It 's the 2nd and 3rd \"auto' s \" ) that size them -bash-3.00# swap -l swapfile dev swaplo blocks free /dev/zvol/dsk/rootpool/swap 256,2 16 4194288 4194288 -bash-3.00# dumpadm Dump content: kernel pages Dump device: /dev/zvol/dsk/rootpool/dump (dedicated) Savecore directory: /var/crash/pststapp01 Savecore enabled: yes ## The default settings for the root filesystem: -- The BE info: --------------- -bash-3.00# lustatus Boot Environment Is Active Active Can Copy Name Complete Now On Reboot Delete Status -------------------------- -------- ------ --------- ------ ---------- zfsroot yes yes yes no - -bash-3.00# lucurr zfsroot -- The zfs settings for root for that BE: command notes: zfs get -r (recursive) \" all \"|property[,...] fs|vol|snapshot -bash-3.00# zfs get -r all rootpool/ROOT/zfsroot NAME PROPERTY VALUE SOURCE rootpool/ROOT/zfsroot type filesystem - rootpool/ROOT/zfsroot creation Thu Jul 9 7:55 2009 - rootpool/ROOT/zfsroot used 2.64G - rootpool/ROOT/zfsroot available 128G - rootpool/ROOT/zfsroot referenced 2.43G - rootpool/ROOT/zfsroot compressratio 1.00x - rootpool/ROOT/zfsroot mounted yes - rootpool/ROOT/zfsroot quota none default rootpool/ROOT/zfsroot reservation none default rootpool/ROOT/zfsroot recordsize 128K default rootpool/ROOT/zfsroot mountpoint / local rootpool/ROOT/zfsroot sharenfs off default rootpool/ROOT/zfsroot checksum on default rootpool/ROOT/zfsroot compression off default rootpool/ROOT/zfsroot atime on default rootpool/ROOT/zfsroot devices on default rootpool/ROOT/zfsroot exec on default rootpool/ROOT/zfsroot setuid on default rootpool/ROOT/zfsroot readonly off default rootpool/ROOT/zfsroot zoned off default rootpool/ROOT/zfsroot snapdir hidden default rootpool/ROOT/zfsroot aclmode groupmask default rootpool/ROOT/zfsroot aclinherit restricted default rootpool/ROOT/zfsroot canmount noauto local rootpool/ROOT/zfsroot shareiscsi off default rootpool/ROOT/zfsroot xattr on default rootpool/ROOT/zfsroot copies 1 default rootpool/ROOT/zfsroot version 3 - rootpool/ROOT/zfsroot utf8only off - rootpool/ROOT/zfsroot normalization none - rootpool/ROOT/zfsroot casesensitivity sensitive - rootpool/ROOT/zfsroot vscan off default rootpool/ROOT/zfsroot nbmand off default rootpool/ROOT/zfsroot sharesmb off default rootpool/ROOT/zfsroot refquota none default rootpool/ROOT/zfsroot refreservation none default rootpool/ROOT/zfsroot/var type filesystem - rootpool/ROOT/zfsroot/var creation Thu Jul 9 7:55 2009 - rootpool/ROOT/zfsroot/var used 215M - rootpool/ROOT/zfsroot/var available 128G - rootpool/ROOT/zfsroot/var referenced 215M - rootpool/ROOT/zfsroot/var compressratio 1.00x - rootpool/ROOT/zfsroot/var mounted yes - rootpool/ROOT/zfsroot/var quota none default rootpool/ROOT/zfsroot/var reservation none default rootpool/ROOT/zfsroot/var recordsize 128K default rootpool/ROOT/zfsroot/var mountpoint /var inherited from rootpool/ROOT/zfsroot rootpool/ROOT/zfsroot/var sharenfs off default rootpool/ROOT/zfsroot/var checksum on default rootpool/ROOT/zfsroot/var compression off default rootpool/ROOT/zfsroot/var atime on default rootpool/ROOT/zfsroot/var devices on default rootpool/ROOT/zfsroot/var exec on default rootpool/ROOT/zfsroot/var setuid on default rootpool/ROOT/zfsroot/var readonly off default rootpool/ROOT/zfsroot/var zoned off default rootpool/ROOT/zfsroot/var snapdir hidden default rootpool/ROOT/zfsroot/var aclmode groupmask default rootpool/ROOT/zfsroot/var aclinherit restricted default rootpool/ROOT/zfsroot/var canmount noauto local rootpool/ROOT/zfsroot/var shareiscsi off default rootpool/ROOT/zfsroot/var xattr on default rootpool/ROOT/zfsroot/var copies 1 default rootpool/ROOT/zfsroot/var version 3 - rootpool/ROOT/zfsroot/var utf8only off - rootpool/ROOT/zfsroot/var normalization none - rootpool/ROOT/zfsroot/var casesensitivity sensitive - rootpool/ROOT/zfsroot/var vscan off default rootpool/ROOT/zfsroot/var nbmand off default rootpool/ROOT/zfsroot/var sharesmb off default rootpool/ROOT/zfsroot/var refquota none default rootpool/ROOT/zfsroot/var refreservation none default ## Items of note: no compression: rootpool/ROOT/zfsroot compression off default no sharenfs: rootpool/ROOT/zfsroot sharenfs off default checksum is on: rootpool/ROOT/zfsroot checksum on default no size restrictions: rootpool/ROOT/zfsroot/var quota none default rootpool/ROOT/zfsroot/var reservation none default rootpool/ROOT/zfsroot/var refquota none default rootpool/ROOT/zfsroot/var refreservation none default ## And the disk partitioning: -bash-3.00# prtvtoc /dev/rdsk/c1t0d0s0 * /dev/rdsk/c1t0d0s0 partition map * * Dimensions: * 512 bytes/sector * 848 sectors/track * 24 tracks/cylinder * 20352 sectors/cylinder * 14089 cylinders * 14087 accessible cylinders * * Flags: * 1: unmountable * 10: read-only * * First Sector Last * Partition Tag Flags Sector Count Sector Mount Directory 0 2 00 0 286698624 286698623 2 5 00 0 286698624 286698623 -bash-3.00# prtvtoc /dev/rdsk/c1t1d0s0 * /dev/rdsk/c1t1d0s0 partition map * * Dimensions: * 512 bytes/sector * 848 sectors/track * 24 tracks/cylinder * 20352 sectors/cylinder * 14089 cylinders * 14087 accessible cylinders * * Flags: * 1: unmountable * 10: read-only * * First Sector Last * Partition Tag Flags Sector Count Sector Mount Directory 0 0 00 0 286698624 286698623 2 5 00 0 286698624 286698623 ### Now, let's setup some resource limitations: 10GB quota for /var: -bash-3.00# zfs set quota=10g rootpool/ROOT/zfsroot/var -bash-3.00# zfs list -o name,used,avail,refer,quota rootpool/ROOT/zfsroot/var NAME USED AVAIL REFER QUOTA rootpool/ROOT/zfsroot/var 283M 9.72G 283M 10G -bash-3.00# df -h Filesystem size used avail capacity Mounted on rootpool/ROOT/zfsroot 134G 2.4G 128G 2% / /devices 0K 0K 0K 0% /devices ctfs 0K 0K 0K 0% /system/contract proc 0K 0K 0K 0% /proc mnttab 0K 0K 0K 0% /etc/mnttab swap 28G 1.2M 28G 1% /etc/svc/volatile objfs 0K 0K 0K 0% /system/object sharefs 0K 0K 0K 0% /etc/dfs/sharetab /platform/SUNW,SPARC-Enterprise-T5220/lib/libc_psr/libc_psr_hwcap2.so.1 130G 2.4G 128G 2% /platform/sun4v/lib/libc_psr.so.1 /platform/SUNW,SPARC-Enterprise-T5220/lib/sparcv9/libc_psr/libc_psr_hwcap2.so.1 130G 2.4G 128G 2% /platform/sun4v/lib/sparcv9/libc_psr.so.1 fd 0K 0K 0K 0% /dev/fd rootpool/ROOT/zfsroot/var 10G 283M 9.7G 3% /var <------------------- swap 28G 96K 28G 1% /tmp swap 28G 32K 28G 1% /var/run rootpool/export 134G 20K 128G 1% /export rootpool/export/home 134G 18K 128G 1% /export/home rootpool 134G 94K 128G 1% /rootpool 10G reserved for / (not including snaps) -bash-3.00# df -h / Filesystem size used avail capacity Mounted on rootpool/ROOT/zfsroot 134G 2.4G 128G 2% / -bash-3.00# zfs list / NAME USED AVAIL REFER MOUNTPOINT rootpool/ROOT/zfsroot 2.70G 128G 2.43G / -bash-3.00# zfs set refreservation=10g rootpool/ROOT/zfsroot -bash-3.00# zfs list / NAME USED AVAIL REFER MOUNTPOINT rootpool/ROOT/zfsroot 10.3G 128G 2.43G / ## Now, let's take a snapshot of / only -bash-3.00# zfs snapshot rootpool/ROOT/zfsroot@20090714a -bash-3.00# zfs list -r / NAME USED AVAIL REFER MOUNTPOINT rootpool/ROOT/zfsroot 12.7G 128G 2.43G / rootpool/ROOT/zfsroot@20090714a 0 - 2.43G - rootpool/ROOT/zfsroot/var 283M 9.72G 283M /var -bash-3.00# zfs get all rootpool/ROOT/zfsroot@20090714a NAME PROPERTY VALUE SOURCE rootpool/ROOT/zfsroot@20090714a type snapshot - rootpool/ROOT/zfsroot@20090714a creation Tue Jul 14 22:04 2009 - rootpool/ROOT/zfsroot@20090714a used 0 - rootpool/ROOT/zfsroot@20090714a referenced 2.43G - rootpool/ROOT/zfsroot@20090714a compressratio 1.00x - rootpool/ROOT/zfsroot@20090714a devices on default rootpool/ROOT/zfsroot@20090714a exec on default rootpool/ROOT/zfsroot@20090714a setuid on default rootpool/ROOT/zfsroot@20090714a shareiscsi off default rootpool/ROOT/zfsroot@20090714a xattr on default rootpool/ROOT/zfsroot@20090714a version 3 - rootpool/ROOT/zfsroot@20090714a utf8only off - rootpool/ROOT/zfsroot@20090714a normalization none - rootpool/ROOT/zfsroot@20090714a casesensitivity sensitive - rootpool/ROOT/zfsroot@20090714a nbmand off default -bash-3.00# ls -al /.zfs total 5 dr-xr-xr-x 3 root root 3 Jul 9 07:55 . drwxr-xr-x 26 root root 29 Jul 14 14:19 .. dr-xr-xr-x 2 root root 2 Jul 9 07:55 snapshot ## Recover a file: -bash-3.00# cat /etc/motd Sun Microsystems Inc. SunOS 5.10 Generic January 2005 -bash-3.00# echo 'mike o is da bomb!' > /etc/motd -bash-3.00# cat /etc/motd mike o is da bomb! -bash-3.00# cp /.zfs/snapshot/20090714a/etc/motd /etc/motd -bash-3.00# cat /etc/motd Sun Microsystems Inc. SunOS 5.10 Generic January 2005 ## and, now that the dataset changed (regardless of the data returning to original data), ## the size of the snapshot has changed: -bash-3.00# zfs list -r / NAME USED AVAIL REFER MOUNTPOINT rootpool/ROOT/zfsroot 12.7G 128G 2.43G / rootpool/ROOT/zfsroot@20090714a 38.5K - 2.43G - <---------- rootpool/ROOT/zfsroot/var 283M 9.72G 283M /var ## Now, let's create a recursive snapshot of /, which will include it's dependencies: -bash-3.00# zfs snapshot -r rootpool/ROOT/zfsroot@20090714b -bash-3.00# zfs list -r / NAME USED AVAIL REFER MOUNTPOINT rootpool/ROOT/zfsroot 12.7G 128G 2.43G / rootpool/ROOT/zfsroot@20090714a 38.5K - 2.43G - rootpool/ROOT/zfsroot@20090714b 0 - 2.43G - rootpool/ROOT/zfsroot/var 283M 9.72G 283M /var rootpool/ROOT/zfsroot/var@20090714b 0 - 283M - # note that /var and / zfs filesystems both have a snapshot named the same. ## Here's all the snapshots: -bash-3.00# zfs list -t snapshot -r -o name,creation / NAME CREATION rootpool/ROOT/zfsroot@20090714a Tue Jul 14 22:04 2009 rootpool/ROOT/zfsroot@20090714b Tue Jul 14 22:14 2009 rootpool/ROOT/zfsroot/var@20090714b Tue Jul 14 22:14 2009 ## dump and swap: -bash-3.00# dumpadm Dump content: kernel pages Dump device: /dev/zvol/dsk/rootpool/dump (dedicated) Savecore directory: /var/crash/pststapp01 Savecore enabled: yes -bash-3.00# swap -l swapfile dev swaplo blocks free /dev/zvol/dsk/rootpool/swap 256,2 16 4194288 4194288 ## and the devices: -bash-3.00# ls -al /dev/zvol/dsk/rootpool/ total 8 drwxr-xr-x 2 root root 4 Jul 9 08:19 . drwxr-xr-x 3 root root 3 Jul 9 08:08 .. lrwxrwxrwx 1 root root 35 Jul 9 08:19 dump -> ../../../../devices/pseudo/zfs@0:1c lrwxrwxrwx 1 root root 35 Jul 9 08:19 swap -> ../../../../devices/pseudo/zfs@0:2c -bash-3.00# zfs get all rootpool/dump rootpool/swap NAME PROPERTY VALUE SOURCE rootpool/dump type volume - rootpool/dump creation Thu Jul 9 7:54 2009 - rootpool/dump used 1.50G - rootpool/dump available 118G - rootpool/dump referenced 1.50G - rootpool/dump compressratio 1.00x - rootpool/dump reservation none default rootpool/dump volsize 1.50G - rootpool/dump volblocksize 128K - rootpool/dump checksum off local rootpool/dump compression off local rootpool/dump readonly off default rootpool/dump shareiscsi off default rootpool/dump copies 1 default rootpool/dump refreservation none default rootpool/swap type volume - rootpool/swap creation Thu Jul 9 7:54 2009 - rootpool/swap used 2G - rootpool/swap available 120G - rootpool/swap referenced 16K - rootpool/swap compressratio 1.00x - rootpool/swap reservation none default rootpool/swap volsize 2G - rootpool/swap volblocksize 8K - rootpool/swap checksum on default rootpool/swap compression off default rootpool/swap readonly off default rootpool/swap shareiscsi off default rootpool/swap copies 1 default rootpool/swap refreservation 2G local ## Resize dump device and swap to 4g each # Resize Dump -bash-3.00# zfs list rootpool/dump NAME USED AVAIL REFER MOUNTPOINT rootpool/dump 1.50G 118G 1.50G - -bash-3.00# zfs get volsize rootpool/dump NAME PROPERTY VALUE SOURCE rootpool/dump volsize 1.50G - -bash-3.00# zfs set volsize=4g rootpool/dump -bash-3.00# zfs get volsize rootpool/dump NAME PROPERTY VALUE SOURCE rootpool/dump volsize 4G - -bash-3.00# zfs list rootpool/dump NAME USED AVAIL REFER MOUNTPOINT rootpool/dump 4.00G 115G 4.00G - # resize swap: -bash-3.00# zfs list rootpool/swap NAME USED AVAIL REFER MOUNTPOINT rootpool/swap 2G 117G 16K - -bash-3.00# swap -l swapfile dev swaplo blocks free /dev/zvol/dsk/rootpool/swap 256,2 16 4194288 4194288 # remove the swap space -bash-3.00# swap -d /dev/zvol/dsk/rootpool/swap -bash-3.00# swap -l No swap devices configured # grow the swap zfs volume -bash-3.00# zfs set volsize=4g rootpool/swap -bash-3.00# zfs get volsize rootpool/swap NAME PROPERTY VALUE SOURCE rootpool/swap volsize 4G - # re-add the swap device -bash-3.00# swap -a /dev/zvol/dsk/rootpool/swap /dev/zvol/dsk/rootpool/swap is in use for live upgrade -. Please see ludelete(1M). # so, use swapadd instead -bash-3.00# /sbin/swapadd -bash-3.00# swap -l swapfile dev swaplo blocks free /dev/zvol/dsk/rootpool/swap 256,2 16 8388592 8388592 ZFS Boot Environment and Live Upgrade ## Tasks: create a second BE ( lucreate ) patch the second BE with latest patches ( luupgrade ) make the 2nd BE bootable and active on next reboot ( luactivate ) compare the changed files across the BE 's (lucompare) mount file systems from the inactive BE (lumount) and umount (luumount) boot from the new BE (test boot -Z display) boot again from the 1st BE (simulate roll-back) (luactivate) ## Coniderations: Live Upgrade Issues * The Solaris installation GUI' s standard-upgrade option is not available for migrating from a UFS to a ZFS root file system. To migrate from a UFS file system, you must use Solaris Live Upgrade. * You cannot use Solaris Live Upgrade to create a UFS BE from a ZFS BE. * Do not rename your ZFS BEs with the zfs rename command because the Solaris Live Upgrade feature is unaware of the name change. Subsequent commands, such as ludelete, will fail. In fact, do not rename your ZFS pools or file systems if you have existing BEs that you want to continue to use. * Solaris Live Upgrade creates the datasets for the BE and ZFS volumes for the swap area and dump device but does not account for any existing dataset property modifications. Thus, if you want a dataset property enabled in the new BE, you must set the property before the lucreate operation. For example: zfs set compression = on rpool/ROOT * When creating an alternative BE that is a clone of the primary BE, you cannot use the -f, -x, -y, -Y, and -z options to include or exclude files from the primary BE. You can still use the inclusion and exclusion option set in the following cases: UFS -> UFS UFS -> ZFS ZFS -> ZFS ( different pool ) * Although you can use Solaris Live Upgrade to upgrade your UFS root file system to a ZFS root file system, you cannot use Solaris Live Upgrade to upgrade non-root or shared file systems. * On a SPARC system that runs the Solaris 10 5/09 release, set the BOOT_MENU_FILE variable before activating the ZFS BE with luactivate, due to CR 6824589. # BOOT_MENU_FILE=\"menu.lst\" # export BOOT_MENU_FILE ## starting zfs environment: -bash-3.00# zfs list NAME USED AVAIL REFER MOUNTPOINT rootpool 20.8G 113G 94K /rootpool rootpool/ROOT 12.8G 113G 18K legacy rootpool/ROOT/zfsroot 12.8G 123G 2.43G / rootpool/ROOT/zfsroot@20090714a 38.5K - 2.43G - rootpool/ROOT/zfsroot@20090714b 38K - 2.43G - rootpool/ROOT/zfsroot/var 362M 9.65G 361M /var rootpool/ROOT/zfsroot/var@20090714b 1.63M - 283M - rootpool/dump 4.00G 113G 4.00G - rootpool/export 38K 113G 20K /export rootpool/export/home 18K 113G 18K /export/home rootpool/swap 4G 117G 16K - -bash-3.00# zpool status pool: rootpool state: ONLINE scrub: none requested config: NAME STATE READ WRITE CKSUM rootpool ONLINE 0 0 0 mirror ONLINE 0 0 0 c1t0d0s0 ONLINE 0 0 0 c1t1d0s0 ONLINE 0 0 0 errors: No known data errors ## Starting BE setup: -bash-3.00# lustatus Boot Environment Is Active Active Can Copy Name Complete Now On Reboot Delete Status -------------------------- -------- ------ --------- ------ ---------- zfsroot yes yes yes no - -bash-3.00# cat /etc/lutab # DO NOT EDIT THIS FILE BY HAND. This file is not a public interface. # The format and contents of this file are subject to change. # Any user modification to this file may result in the incorrect # operation of Live Upgrade. 1:zfsroot:C:0 1:/:rootpool/ROOT/zfsroot:1 1:boot-device:/dev/dsk/c1t0d0s0:2 -bash-3.00# lucurr zfsroot ## From infodoc 206844, minimum sol10 LU patch levels: The following patches provide Live Upgrade functionality for Solaris 10 SPARC: If you are running non-global zones, see the subsequent section for additional patches which you must also install. 118815-05 or higher nawk patch 120900-04 or higher libzonecfg patch 121133-02 or higher SUNWzoneu required patch 119254-64 or higher Install and Patch Utilities Patch** 119317-01 or higher SVr4 Packaging Commands ( usr ) patch 120235-01 or higher SUNWluzone required patches 121428-08 or higher SUNWluzone required patches 121002-03 or higher pax patches 123121-02 or higher prodreg patches The following patch is only required if the TSIpgx package is installed: 119309-03 or higher PGX32 Graphics ( TSIpgx Power Management ) 121004-03 or higher sh patch 119574-02 or higher su patch 120996-02 or higher cpio patch 120068-03 or higher telnet security patch 119042-10 or higher /usr/sbin/svccfg patch 126538-01 or higher i.manifest r.manifest class action script patch 123332-01 or higher tftp patch 119246-27 or higher Man pages patch 121901-02 or higher i.manifest r.manifest class action script patch 125418-01 or higher in.telnetd patch 121430-34 or higher Live Upgrade patch 123839-07 or higher Fault Manager patch 127922-03 or higher cpio patch 137321-01 or higher p7zip patch ( required if upgrading to Solaris 10 5/08 or higher ) 138130-01 or higher vold patch If applied to the live boot environment, the system should be rebooted once all patches are applied. ## All levels validated to exceed those above. ## But, install the latest patch for Live Upgrade (best practice) ## This particular patch addresses the luactivate issue (the work-around of exporting BOOT_MENU_FILE) -bash-3.00# patchadd -d 121430-37 Validating patches... Loading patches installed on the system... Done! Loading patches requested to install. Done! Checking patches that you specified for installation. Done! Approved patches will be installed in this order: 121430-37 Checking installed patches... Executing prepatch script... Verifying sufficient filesystem capacity ( dry run method ) ... Installing patch packages... Patch 121430-37 has been successfully installed. See /var/sadm/patch/121430-37/log for details Patch packages installed: SUNWlucfg SUNWlur SUNWluu ## Now, we can start: ## Create the second BE: -bash-3.00# lucreate -n 20090721mao Analyzing system configuration. Comparing source boot environment <zfsroot> file systems with the file system ( s ) you specified for the new boot environment. Determining which file systems should be in the new boot environment. Updating boot environment description database on all BEs. Updating system configuration files. Creating configuration for boot environment <20090721mao>. Source boot environment is <zfsroot>. Creating boot environment <20090721mao>. Cloning file systems from boot environment <zfsroot> to create boot environment <20090721mao>. Creating snapshot for <rootpool/ROOT/zfsroot> on <rootpool/ROOT/zfsroot@20090721mao>. Creating clone for <rootpool/ROOT/zfsroot@20090721mao> on <rootpool/ROOT/20090721mao>. Setting canmount = noauto for </> in zone <global> on <rootpool/ROOT/20090721mao>. Creating snapshot for <rootpool/ROOT/zfsroot/var> on <rootpool/ROOT/zfsroot/var@20090721mao>. Creating clone for <rootpool/ROOT/zfsroot/var@20090721mao> on <rootpool/ROOT/20090721mao/var>. Setting canmount = noauto for </var> in zone <global> on <rootpool/ROOT/20090721mao/var>. Population of boot environment <20090721mao> successful. Creation of boot environment <20090721mao> successful. -bash-3.00# zfs list NAME USED AVAIL REFER MOUNTPOINT rootpool 24.5G 109G 94K /rootpool rootpool/ROOT 16.5G 109G 18K legacy rootpool/ROOT/20090721mao 145K 109G 2.43G / <----- rootpool/ROOT/20090721mao/var 50K 109G 4.06G /var <----- rootpool/ROOT/zfsroot 16.5G 119G 2.43G / rootpool/ROOT/zfsroot@20090714a 38.5K - 2.43G - rootpool/ROOT/zfsroot@20090714b 38K - 2.43G - rootpool/ROOT/zfsroot@20090721mao 69.5K - 2.43G - rootpool/ROOT/zfsroot/var 4.07G 5.93G 4.06G /var rootpool/ROOT/zfsroot/var@20090714b 10.4M - 283M - rootpool/ROOT/zfsroot/var@20090721mao 310K - 4.06G - <----- rootpool/dump 4.00G 109G 4.00G - rootpool/export 38K 109G 20K /export rootpool/export/home 18K 109G 18K /export/home rootpool/swap 4G 113G 16K - -bash-3.00# lustatus Boot Environment Is Active Active Can Copy Name Complete Now On Reboot Delete Status -------------------------- -------- ------ --------- ------ ---------- zfsroot yes yes yes no - 20090721mao yes no no yes - ## patch the second BE with latest patches (luupgrade) ## patch set copied locally: -bash-3.00# ls -lad /var/tmp/10_Recommended drwxr-xr-x 157 root root 161 Jul 17 12:13 /var/tmp/10_Recommended ## Usage: luupgrade - Add Patches: luupgrade -t -n BE_name [ -l error_log ] [ -o outfile ] [ -N ] [ -X ] -s source_patches_path [ -O patchadd_options ] [ patchname [ patchname... ] ] ## Patch: -bash-3.00# luupgrade -t -n 20090721mao -s /var/tmp/10_Recommended Validating the contents of the media </var/tmp/10_Recommended>. The media contains 155 software patches that can be added. All 155 patches will be added because you did not specify any specific patches to add. Mounting the BE <20090721mao>. Adding patches to the BE <20090721mao>. Validating patches... Loading patches installed on the system... Done! Loading patches requested to install. Version of package SUNWpfb from directory SUNWpfb.u in patch 118712-23 differs from the package installed on the system. Version of package SUNWpfb from directory SUNWpfb.us in patch 118712-23 differs from the package installed on the system. Version of package SUNWced from directory SUNWced.us in patch 118777-14 differs from the package installed on the system. Version of package SUNWced from directory SUNWced.u in patch 118777-14 differs from the package installed on the system. Version of package SUNWkvm from directory SUNWkvm.u in patch 118833-36 differs from the package installed on the system. ... ... Requested patch 140860-01 is already installed on the system. Requested patch 140899-01 is already installed on the system. Requested patch 141016-01 is already installed on the system. The following requested patches do not update any packages installed on the system No Packages from patch 139943-01 are installed on the system. Checking patches that you specified for installation. Done! The following requested patches will not be installed because they have been made obsolete by other patches already installed on the system or by patches you have specified for installation. 0 All packages from patch 118731-01 are patched by higher revision patches. 1 All packages from patch 122660-10 are patched by higher revision patches. 2 All packages from patch 124204-04 are patched by higher revision patches. The following requested patches will not be installed because the packages they patch are not installed on this system. 0 No Packages from patch 121975-01 are installed on the system. 1 No Packages from patch 118667-19 are installed on the system. ... ... The following requested patches will not be installed because at least one required patch is not installed on this system. 0 For patch 120410-31, required patch 121975-01 will not be installed because it updates no packages on this system. Approved patches will be installed in this order: 118666-20 118777-14 118959-04 119059-47 119090-32 119213-19 119254-66 119757-15 119783-11 120272-24 122261-02 122911-16 123893-15 125555-05 125952-19 137080-03 138322-03 138822-04 138874-03 139604-05 139606-02 139608-04 139966-02 139969-02 140074-08 140171-02 140386-04 140391-03 140397-08 140917-01 140921-01 141020-01 141414-02 141719-01 141733-03 141742-02 141765-01 141778-02 Checking installed patches... Verifying sufficient filesystem capacity ( dry run method ) ... Installing patch packages... ## While patching: -bash-3.00# ps -eaf | grep luu root 16270 15416 0 14:33:12 pts/2 0:00 grep luu root 2434 28299 0 14:30:50 pts/1 0:01 /bin/ksh /usr/sbin/luupgrade -t -n 20090721mao -s /var/tmp/10_Recommended -bash-3.00# lustatus Boot Environment Is Active Active Can Copy Name Complete Now On Reboot Delete Status -------------------------- -------- ------ --------- ------ ---------- zfsroot yes yes yes no - 20090721mao yes no no yes - -bash-3.00# ptree 2434 415 /opt/quest/sbin/sshd 28296 /opt/quest/sbin/sshd -R 28299 -bash 2434 /bin/ksh /usr/sbin/luupgrade -t -n 20090721mao -s /var/tmp/10_Recom 2867 /usr/sbin/patchadd -R /a -M /var/tmp/10_Recommended 118666-20 118 2871 /bin/ksh -hp /usr/lib/patch/patchadd -R /a -M /var/tmp/10_Recom 8794 pkgadd -O patchPkgInstall -O nozones -O enable-hollow-package 8797 /usr/sadm/install/bin/pkginstall -O patchPkgInstall -S -M - 29416 /sbin/sh /a/var/sadm/pkg/SUNWj5dmo/install/postinstall 29563 rm -r /a/var/sadm/pkg/SUNWj5dmo/save/SUNWj5dmo ## back to output: Patch 118666-20 has been successfully installed. See /a/var/sadm/patch/118666-20/log for details Patch packages installed: SUNWj5cfg SUNWj5dev SUNWj5dmo SUNWj5man SUNWj5rt Checking installed patches... Executing prepatch script... Verifying sufficient filesystem capacity ( dry run method ) ... Installing patch packages... ... ... Checking installed patches... Verifying sufficient filesystem capacity ( dry run method ) ... Installing patch packages... Patch 141765-01 has been successfully installed. See /a/var/sadm/patch/141765-01/log for details Patch packages installed: SUNWdtrp Checking installed patches... Verifying sufficient filesystem capacity ( dry run method ) ... Installing patch packages... Patch 141778-02 has been successfully installed. See /a/var/sadm/patch/141778-02/log for details Patch packages installed: SUNWcakr SUNWkvm SUNWldomr SUNWldomu Unmounting the BE <20090721mao>. The patch add to the BE <20090721mao> failed ( with result code <1> ) . <--------- ?????????? ## Everything looks fine, no idea what generated the failure message ## Mike C thinks that the patches against uninstalled packages, etc. would generate a return code sufficient to ## result in the overall 'error' warning. ## TODO: validate this by patching with a single 'good' patch, then with a unneeded patch, and compare ## luupgrade exit values. -bash-3.00# lustatus Boot Environment Is Active Active Can Copy Name Complete Now On Reboot Delete Status -------------------------- -------- ------ --------- ------ ---------- zfsroot yes yes yes no - 20090721mao yes no no yes - ## Find the file changes since LU creation (the patch activity) -bash-3.00# lucompare -o /var/tmp/20090721mao_patch_changes 20090721mao Determining the configuration of 20090721mao ... Processing Global Zone Comparing / ... Compare complete for /. Comparing /var ... Compare complete for /var. ## The ouput file contains all of the changes, including the changetype: for example: Sizes differ 01 < /usr/postgres/8.3/doc/html/functions-admin.html:root:bin:1:33060:REGFIL:27559: 02 > /usr/postgres/8.3/doc/html/functions-admin.html:root:bin:1:33060:REGFIL:27573: Checksums differ 01 < /usr/postgres/8.3/doc/html/view-pg-timezone-abbrevs.html:root:bin:1:33060:REGFIL:3617:534836224: 02 > /usr/postgres/8.3/doc/html/view-pg-timezone-abbrevs.html:root:bin:1:33060:REGFIL:3617:2668812025: Symbolic links are to different files Symbolic links are to different files 01 < /usr/java:root:other:1:41471:SYMLINK:15: 02 > /usr/java:root:other:1:41471:SYMLINK:15: etc. ## Now that we have patched, let's test mounting the alt BE file system to the live BE, and update a file: ## from lumount man page: The lumount and luumount commands enable you to mount or unmount all of the file systems in a boot environment ( BE ) . This allows you to inspect or modify the files in a BE while that BE is not active. By default, lumount mounts the file systems on a mount point of the form /.alt.BE_name, where BE_name is the name of the BE whose file systems are being mounted. See NOTES. ## So, run it w/o options (except the BE name), and let it do it's thing -bash-3.00# sudo lumount 20090721mao /.alt.20090721mao # it very kindly returns the mount point. =] ## df: 134G 2.4G 109G 3% /.alt.20090721mao /export 109G 20K 109G 1% /.alt.20090721mao/export /export/home 109G 18K 109G 1% /.alt.20090721mao/export/home /rootpool 109G 94K 109G 1% /.alt.20090721mao/rootpool rootpool/ROOT/20090721mao/var 134G 4.4G 109G 4% /.alt.20090721mao/var swap 12G 0K 12G 0% /.alt.20090721mao/var/run swap 12G 0K 12G 0% /.alt.20090721mao/tmp ## mod a file: -bash-3.00# cd /.alt.20090721mao/etc -bash-3.00# cat /.alt.20090721mao/etc/motd Sun Microsystems Inc. SunOS 5.10 Generic January 2005 # mike o rules! <--------------- this is not from standard jumpstart =] ## now that we have manipulated the BE, unmount it: -bash-3.00# luumount 20090721mao ## Activate the alternate boot environment to be active next reboot: ## From luactivate man page: The luactivate command, with no arguments, displays the name of the boot environment ( BE ) that will be active upon the next reboot of the system. When an argument ( a BE ) is speci- fied, luactivate activates the specified BE. -bash-3.00# lustatus Boot Environment Is Active Active Can Copy Name Complete Now On Reboot Delete Status -------------------------- -------- ------ --------- ------ ---------- zfsroot yes yes yes no - 20090721mao yes no no yes - -bash-3.00# luactivate zfsroot -bash-3.00# luactivate 20090721mao A Live Upgrade Sync operation will be performed on startup of boot environment <20090721mao>. ********************************************************************** The target boot environment has been activated. It will be used when you reboot. NOTE: You MUST NOT USE the reboot, halt, or uadmin commands. You MUST USE either the init or the shutdown command when you reboot. If you do not use either init or shutdown, the system will not boot using the target BE. ********************************************************************** In case of a failure while booting to the target BE, the following process needs to be followed to fallback to the currently working boot environment: 1. Enter the PROM monitor ( ok prompt ) . 2. Boot the machine to Single User mode using a different boot device ( like the Solaris Install CD or Network ) . Examples: At the PROM monitor ( ok prompt ) : For boot to Solaris CD: boot cdrom -s For boot to network: boot net -s 3. Mount the Current boot environment root slice to some directory ( like /mnt ) . You can use the following command to mount: mount -Fzfs /dev/dsk/c1t0d0s0 /mnt 4. Run <luactivate> utility with out any arguments from the current boot environment root slice, as shown below: /mnt/sbin/luactivate 5. luactivate, activates the previous working boot environment and indicates the result. 6. Exit Single User mode and reboot the machine. ********************************************************************** Modifying boot archive service Activation of boot environment <20090721mao> successful. ## status: -bash-3.00# lustatus Boot Environment Is Active Active Can Copy Name Complete Now On Reboot Delete Status -------------------------- -------- ------ --------- ------ ---------- zfsroot yes yes no no - 20090721mao yes no yes no - -bash-3.00# luactivate 20090721mao ## Now, reboot. Wait wait - init or shutdown... =] -bash-3.00# who am i root console Jul 15 12:37 -bash-3.00# hostname pststapp01 -bash-3.00# shutdown -i6 -g0 -y ... SPARC Enterprise T5220, No Keyboard Copyright 2009 Sun Microsystems, Inc. All rights reserved. OpenBoot 4.30.2.b, 32640 MB memory available, Serial #85380300. Ethernet address 0:21:28:16:cc:cc, Host ID: 8516cccc. Boot device: /pci@0/pci@0/pci@2/scsi@0/disk@0,0:a File and args: SunOS Release 5.10 Version Generic_141414-02 64-bit Copyright 1983-2009 Sun Microsystems, Inc. All rights reserved. Use is subject to license terms. ... Configuring devices. Loading smf ( 5 ) service descriptions: 12/12 Reading ZFS config: done . Mounting ZFS filesystems: ( 8/8 ) pststapp01 console login: [ 08:47:19 slurm ] ~ $ ssh 10.200.19.100 -l root Last login: Tue Jul 21 10:42:56 2009 from slurm.thechildr Sun Microsystems Inc. SunOS 5.10 Generic January 2005 # mike o rules! <-------------------------- file modification from inactive BE, now applied. -bash-3.00# lustatus Boot Environment Is Active Active Can Copy Name Complete Now On Reboot Delete Status -------------------------- -------- ------ --------- ------ ---------- zfsroot yes no no yes - 20090721mao yes yes yes no - -bash-3.00# luactivate 20090721mao ## patch levels: ## (just checking a couple of random levels from those that would have been applied): -bash-3.00# showrev -p | grep 'Patch: 139608' Patch: 139608-02 Obsoletes: 120220-01, 120222-31, 125740-01, 136786-01 Requires: Incompatibles: Packages: SUNWemlxu, SUNWemlxs Patch: 139608-04 Obsoletes: 120220-01, 120222-31, 125740-01, 136786-01 Requires: Incompatibles: Packages: SUNWemlxu, SUNWemlxs -bash-3.00# uname -a SunOS pststapp01 5.10 Generic_141414-02 sun4v sparc SUNW,SPARC-Enterprise-T5220 -bash-3.00# cat /etc/release Solaris 10 5/09 s10s_u7wos_08 SPARC Copyright 2009 Sun Microsystems, Inc. All Rights Reserved. Use is subject to license terms. Assembled 30 March 2009 ## ## Here's the zfs list output, with observations: -bash-3.00# zfs list NAME USED AVAIL REFER MOUNTPOINT rootpool 25.3G 109G 94K /rootpool rootpool/ROOT 17.3G 109G 18K legacy rootpool/ROOT/20090721mao 7.25G 109G 2.19G / rootpool/ROOT/20090721mao@20090714a 38.5K - 2.43G - <----- these snapshots were all from the orig BE rootpool/ROOT/20090721mao@20090714b 38K - 2.43G - <--- ... rootpool/ROOT/20090721mao@20090721mao 4.69M - 2.43G - <--- ... rootpool/ROOT/20090721mao/var 4.44G 109G 4.39G /var rootpool/ROOT/20090721mao/var@20090714b 10.4M - 283M - <--- ... rootpool/ROOT/20090721mao/var@20090721mao 29.7M - 4.06G - <--- ... rootpool/ROOT/zfsroot 10.0G 119G 2.43G / <------ original BE rootpool/ROOT/zfsroot/var 33.6M 9.97G 4.07G /var <------ original BE rootpool/dump 4.00G 109G 4.00G - rootpool/export 38K 109G 20K /export rootpool/export/home 18K 109G 18K /export/home rootpool/swap 4G 113G 16K - ## Everything looks good. ## Now, testing the new PROM boot -Z option to test boot from BE choice menu: ## The lucreate command added the new BE to the menu.1st file automagically: -bash-3.00# pwd /rootpool/boot -bash-3.00# cat menu.lst title zfsroot bootfs rootpool/ROOT/zfsroot title 20090721mao bootfs rootpool/ROOT/20090721mao ## so, shut it down to ok prompt ( *not* changing the BE with luactivate) : -bash-3.00# who am i ; hostname root console Jul 22 09:02 pststapp01 -bash-3.00# shutdown -i 0 -g0 -y ## SPARC Enterprise T5220, No Keyboard Copyright 2009 Sun Microsystems, Inc. All rights reserved. OpenBoot 4.30.2.b, 32640 MB memory available, Serial #85380300. Ethernet address 0:21:28:16:cc:cc, Host ID: 8516cccc. { 0 } ok boot -L Boot device: /pci@0/pci@0/pci@2/scsi@0/disk@0,0:a File and args: -L 1 zfsroot 2 20090721mao Select environment to boot: [ 1 - 2 ] : 1 To boot the selected entry, invoke: boot [ <root-device> ] -Z rootpool/ROOT/zfsroot Program terminated { 0 } ok boot -Z rootpool/ROOT/zfsroot Boot device: /pci@0/pci@0/pci@2/scsi@0/disk@0,0:a File and args: -Z rootpool/ROOT/zfsroot krtld: Ignoring invalid kernel option -Z. krtld: Unused kernel arguments: ` rootpool/ROOT/zfsroot '. # From: # http://www.solarisinternals.com/wiki/index.php/ZFS_Troubleshooting_Guide \" ZFS Boot Error Messages * CR 2164779 - Ignore the following krtld messages from the boot -Z command. They are harmless: krtld: Ignoring invalid kernel option -Z. krtld: Unused kernel arguments: `rpool/ROOT/zfs1008BE' . \" -bash-3.00# luactivate zfsroot -bash-3.00# lustatus Boot Environment Is Active Active Can Copy Name Complete Now On Reboot Delete Status -------------------------- -------- ------ --------- ------ ---------- zfsroot yes yes yes no - 20090721mao yes no no yes - ## And, obviously back in the original BE: # back to the boring default. -bash-3.00# cat /etc/motd Sun Microsystems Inc. SunOS 5.10 Generic January 2005 # 20090721mao patched BE is Generic_141414-02 -bash-3.00# uname -a SunOS pststapp01 5.10 Generic_139555-08 sun4v sparc SUNW,SPARC-Enterprise-T5220 # 20090721mao patched BE was 139608-04 -bash-3.00# showrev -p |grep 'Patch: 139608' Patch: 139608-02 Obsoletes: 120220-01, 120222-31, 125740-01, 136786-01 Requires: Incompatibles: Packages: SUNWemlxu, SUNWemlxs NAME USED AVAIL REFER MOUNTPOINT rootpool 25.3G 109G 94K /rootpool rootpool/ROOT 17.3G 109G 18K legacy rootpool/ROOT/20090721mao 7.25G 109G 2.19G / rootpool/ROOT/20090721mao@20090714a 38.5K - 2.43G - rootpool/ROOT/20090721mao@20090714b 38K - 2.43G - rootpool/ROOT/20090721mao@20090721mao 4.69M - 2.43G - rootpool/ROOT/20090721mao/var 4.44G 109G 4.39G /var rootpool/ROOT/20090721mao/var@20090714b 10.4M - 283M - rootpool/ROOT/20090721mao/var@20090721mao 29.7M - 4.06G - rootpool/ROOT/zfsroot 10.0G 119G 2.43G / rootpool/ROOT/zfsroot/var 33.9M 9.97G 4.07G /var rootpool/dump 4.00G 109G 4.00G - rootpool/export 38K 109G 20K /export rootpool/export/home 18K 109G 18K /export/home rootpool/swap 4G 113G 16K - ZFS Adding Swap device [ 13:10:52 dbtst01 ] ~ $ sudo zfs create -b 8192 -V 4096m rootpool/swap1 [ 13:11:10 dbtst01 ] ~ $ sudo swap -a /dev/zvol/dsk/rootpool/swap1 ZFS Boot into Single User SINGLE USER MODE # zpool list no pools available # zfs list no datasets available # zpool import -R /mnt -a # zfs list -t filesystem NAME USED AVAIL REFER MOUNTPOINT rootpool 15.0G 119G 94K /mnt/rootpool rootpool/ROOT 6.93G 119G 18K legacy rootpool/ROOT/initialBE 6.93G 119G 3.71G /mnt rootpool/ROOT/initialBE/var 2.91G 12.1G 2.86G /mnt/var rootpool/export 722K 10.0G 20K /mnt/export rootpool/export/home 670K 10.0G 233K /mnt/export/home ## now that we have the zpool imported, we can mount the ZFS filesystems that we need: # zfs mount rootpool/ROOT/initialBE # ls -la /mnt total 140 drwxr-xr-x 27 root root 32 Nov 13 12:34 . drwxr-xr-x 19 root root 512 Mar 30 2009 .. drwxr-xr-x 2 root sys 2 Oct 24 16:23 .@localstatedirroot@ drwxr-xr-x 2 root sys 2 Oct 24 16:23 .@sysconfdirroot@ -rw------- 1 root root 24 Oct 25 16:19 .bash_history -rw-r--r-- 1 root root 40 Aug 19 09:54 .forward -rwxr--r-- 1 root root 46 Nov 4 12:26 .osuuid drwx------ 2 root root 3 Oct 24 16:01 .ssh drwx------ 3 root root 3 Oct 24 16:23 .sunw lrwxrwxrwx 1 root root 9 Oct 24 15:54 bin -> ./usr/bin drwxr-xr-x 3 root sys 3 Oct 24 15:55 boot drwxr-xr-x 21 root sys 294 Nov 13 12:15 dev drwxr-xr-x 12 root sys 12 Nov 17 08:24 devices drwxr-xr-x 69 root sys 225 Nov 13 12:34 etc drwxr-xr-x 2 root root 2 Nov 5 14:32 export dr-xr-xr-x 2 root root 2 Oct 24 15:56 home drwxr-xr-x 15 root sys 15 Oct 24 15:57 kernel drwxr-xr-x 7 root bin 243 Oct 24 15:58 lib drwxr-xr-x 2 root sys 2 Oct 24 15:54 mnt dr-xr-xr-x 2 root root 2 Oct 24 16:23 net -rw-r--r-- 1 root root 0 Oct 24 16:01 noautoshutdown drwxr-xr-x 36 root sys 36 Nov 13 08:11 opt drwxr-xr-x 40 root sys 47 Oct 24 15:55 platform dr-xr-xr-x 2 root root 2 Oct 24 15:54 proc drwxr-xr-x 2 root root 2 Oct 24 15:54 rootpool drwxr-xr-x 2 root sys 66 Nov 4 12:49 sbin drwxr-xr-x 4 root root 4 Oct 24 15:54 system drwxr-xr-x 10 root root 10 Nov 5 13:21 tch drwxrwxrwt 2 root sys 2 Nov 17 08:25 tmp drwxr-xr-x 35 root sys 49 Nov 13 08:11 usr drwxr-xr-x 2 root root 2 Oct 24 15:54 var drwxr-xr-x 2 root root 2 Oct 24 16:23 vol ## Now in this case, we wish to revert to pre- 'stsmboot -e' modifications. ## so, I exported my TERM to xterms, and edited /mnt/kernel/drv/fp.conf, removing the ## damage done by the stmsboot cmd - from: disable-sata-mpxio = \"no\" ; to: #disable-sata-mpxio=\"no\"; and rebooted.","tags":"Unix","title":"Notes - ZFS Commands"},{"url":"http://justlearningdjango.com/thoughts-on-securing-a-web-blog.html","text":"Securing a web blog I figure that the more software you have running the more you have to worrry about. To that end I decided I would take a slightly different approach with the whole blogging thing for that reason and a couple more. Here are some things that I considered: Who is going to read the thing? How do you like to write? and do you care about collaboration? What do you really need it to do? There are other questions but for me those three were the ones that stuck out. 1. Who is going to read the thing? - A. In all liklihood, me. There are tons of things and notes and items that I have collected in one form or another that I keep coming back to. Maybe I work on a piece of technology and then dont revisit it for a really long time. All the tips and tricks and things and such that I've picked up leave my head and its good to ahve someplace that I can go to remember. How do you like to write? and do you care about collaboration? A. For me, I like to write quick and simple notes in Vi. I have been using that editor for many, many years and its just something that I'm very familar with. And no...I am not interested in collaboarting this is just for me. What do you really need it to do? A. Well, not much! I really dont need a blog to do much at all. Store pages, Orgnaize things into topics and themes and allow me to search throgh them fairly quickly. That's pretty much it. The other thing that I worry about is security. I setup a default wordpress site once and was amazed at how many bogus comments I ended up getting. The longer I leeft the site up with the default config the more I would get. Hundreds of completely bogus comments. I have no idea why. Now Wordpress does a fairly good job with security but running it in production elsewhere it was clear to see that the more functionality you have the more you have to exploit . Simplier is better if simple is all you need! So that's what's up with this project. I figured I would go with a static blog and if I wnated to do something more elaborate in the future I could move this to github for future refernce. So there you have it...a completely static web blog created using pelican. Simple Linux box, Nginx serving a static directory on a local file system and a site created using css/js and html5 templates. Simple :-)","tags":"Blog","title":"Thoughts on securing a web blog"},{"url":"http://justlearningdjango.com/securing-your-infrastructure.html","text":"There really is no guide to securing your infrastructure - its pretty much impossible. I applaud your efforts though! There are no \"simple fixes\" and surly no simple how-to template that you can follow. \"The only truly secure system is one that is powered off, cast in a block of concrete and sealed in a lead-lined room with armed guard.\" ~ Gene Spafford While this may be the most secure computing model, I think it's safe to say that you lose a bit of functinality with the above approach! The truth of the matter is for a computer system to be worthwhile it must be useful, and to be useful it almost always has to be interconnected to some other computer system and it always needs to be on. The other key attribute to a useful computer system is it needs to be avaiable so that it can be used by humans. And humans are the real problem. As time tics on we become more and more trusting and dependant on all the gadgets and with each and every one of them there are risks. It isn't just our need to be connected that makes us vulnernable, its our desire to be connected as easily and quickly as possible without understanding how we are connected in the first place that makes us vulnerable. I think that in this day in age our largetst defense against the dark arts of the cefisticated computer hacker is the fact that the computer hacker largely doesnt really give a crap. Your best defense is not being a big target. From a security stand point that really isn't the best approach in the whole world when it comes to preparing for the next attack. My account balance is a great reminder of how safe I am from identify theft","tags":"Blog","title":"Securing Your Infrastructure"},{"url":"http://justlearningdjango.com/draft-file-transfer-stuff-in-perl.html","text":"I later moved this whole process to python so I dont even remember if this script worked but hey: #!/usr/bin/perl -w # use Getopt:: Long ; FILE = `ssh prdsftp01.graebel.com \"cd /home/ftp_amz/incoming ; ls *gpg\" if [ $FILE ]; then echo \"Found a file\"; else echo \"DID NOT FIND AFILE\"; fi $ssh = \"/usr/bin/ssh\"; $scp = /usr/bin/scp\"; $ssh_key_file = undef; # might need to define this one day. $staging_dir = \"/var/tmp/staging\"; $samba_share = \"/home/xfer\"; GetOptions( \"pull_files|p\" => \\&pull_remote_files, \"push_files|s\" => \\&push_files, \"remote_host|H=s\" => \\$remote_host, \"remote_user|u\" => \\$remote_user, \"remote_dir|d\" => \\$remote_dir, \"grabel_gpg_key|k\" => \\$key_id, \"help|h\" => \\&help); sub check_local_files { @files = ` ls $samba_share /outgoing/ `; if(@files) { foreach $ sub check_remote_files { @files = ` ssh $remote_host \"ls $remote_dir/*.gpg\" `; foreach $file(@files) { scp $remote_host:$remote_dir/$file $staging_dir; &ck_file_integrity; } } sub ck_file_integrity { ## make sure its really a gpg file. $file = $_[0]; $file_type = ` $file_cmd $file `; if($file_type =~ /ASCII text/) { ` chmod 600 $file `; &decrypt_file($file); }else { print \"File was not what we expected...logging error.\" $error_level=\"warn\" $error_msg = \"Something not right about the file..please take a look in staging.\\n\"; &send_results($error_level,$error_msg); } } sub decrypt_file { $file = $_[0]; if(! $key_id ) { print \"You need to specify a gpg keyfile to use for decryption.\\n\"; exit(1); }else { if(` gpg -- default - key $key_id $file > newfilename ` if(` mv newfilename $samba_dir `) { $error_level=\"success\"; $error_msg = \"File decrypted and mvoed to share.\\n\"; &send_results($error_level,$error_msg); }else { $error_level=\"error\"; $error_msg = \"Failed to decrypt file\\n\"; &send_results($error_level,$error_msg); } } } sub send_results { # buld smtp goodness. open(MAIL,\"|/usr/bin/mailx\") || die \"Could not open mail\\n\"; print MAIL \"To: criley\\@graebel.com\\n\"; print MAIL \"subject: Transfer report\\n\"; print MAIL \"$error_level \\t $error_msg\\n\"; print MAIL \"\\n\"; close(MAIL); print MAIL \"To: $mail = ` mailx - s \"File Transfer\" criley \\ @graebel . com }","tags":"Unix","title":"Draft - File transfer stuff in Perl"},{"url":"http://justlearningdjango.com/writing-a-blog-with-a-static-web-page-generator.html","text":"So here is something. Why ever bother with a static webpage generator when you can easily setup a powerful web framework like Django or Wordpress or Drupal? All wonderful questions. I dont really know. One reason might be that security is in order. The thoguht that your exposure to the intnernet is static. There are no database hooks to take advanatage of, no php vulnerabilities, no dynamic rendering that you need to be concerned with. What ever is rendered is what ever is rendered and that is what you get. CSS and JS run on the client machine and as such can't be exploited on the server because there is nothing to exploit. Kind of cool. The other thing that is kind of cool with this whole pelican thing is how simple it is. You edit your file in an ediotor ( I use VIM because I've been using it for years and years and the key bindings are engraned at this point) and then you just save the file and the geneartor creates the output. Markdown isn't too difficult to use either. Although out of the box there are definately some things to tweak. For exmaple: Its pretty plain looking! s = \"Python syntax highlighting\" print s And here is a heading and this is a block quote. Tables might work like this: Column 1 Column 2 Column 3 One renders nicely","tags":"Blog","title":"Writing a Blog with a Static Web Page Generator"}]}